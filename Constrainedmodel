{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0cdbe170-98c4-4ade-aea1-81b23322d0d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import geopandas as gpd\n",
    "import seaborn as sns\n",
    "import folium\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf\n",
    "import scipy.stats\n",
    "import numpy as np\n",
    "from math import sqrt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cd5361ec-ba08-4656-aeae-8c70c77da1b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read in csv.\n",
    "file_network = pd.read_csv(\"london_flows.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3660c615-b1f0-4b4d-b58c-435eae3814d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         station_origin station_destination  flows  population   jobs  \\\n",
      "0            Abbey Road   Bank and Monument      0         599  78549   \n",
      "1            Abbey Road             Beckton      1         599    442   \n",
      "2            Abbey Road           Blackwall      3         599    665   \n",
      "3            Abbey Road        Canary Wharf      1         599  58772   \n",
      "4            Abbey Road        Canning Town     37         599  15428   \n",
      "...                 ...                 ...    ...         ...    ...   \n",
      "61469  Woolwich Arsenal       Tower Gateway    127        7892   3342   \n",
      "61470  Woolwich Arsenal            West Ham    608        7892   5487   \n",
      "61471  Woolwich Arsenal     West India Quay      6        7892    400   \n",
      "61472  Woolwich Arsenal     West Silvertown     81        7892    893   \n",
      "61473  Woolwich Arsenal           Westferry     76        7892   1250   \n",
      "\n",
      "           distance  \n",
      "0       8131.525097  \n",
      "1       8510.121774  \n",
      "2       3775.448872  \n",
      "3       5086.514220  \n",
      "4       2228.923167  \n",
      "...             ...  \n",
      "61469  13401.795549  \n",
      "61470   8701.454361  \n",
      "61471   9536.720451  \n",
      "61472   5355.248554  \n",
      "61473   9958.371322  \n",
      "\n",
      "[61474 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "print(file_network)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "907edcab-969d-4e93-84ed-2cf7eb4154fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         station_origin station_destination  flows  population   jobs  \\\n",
      "0            Abbey Road   Bank and Monument      0         599  78549   \n",
      "1            Abbey Road             Beckton      1         599    442   \n",
      "2            Abbey Road           Blackwall      3         599    665   \n",
      "3            Abbey Road        Canary Wharf      1         599  58772   \n",
      "4            Abbey Road        Canning Town     37         599  15428   \n",
      "...                 ...                 ...    ...         ...    ...   \n",
      "61408  Woolwich Arsenal       Tower Gateway    127        7892   3342   \n",
      "61409  Woolwich Arsenal            West Ham    608        7892   5487   \n",
      "61410  Woolwich Arsenal     West India Quay      6        7892    400   \n",
      "61411  Woolwich Arsenal     West Silvertown     81        7892    893   \n",
      "61412  Woolwich Arsenal           Westferry     76        7892   1250   \n",
      "\n",
      "           distance  \n",
      "0       8131.525097  \n",
      "1       8510.121774  \n",
      "2       3775.448872  \n",
      "3       5086.514220  \n",
      "4       2228.923167  \n",
      "...             ...  \n",
      "61408  13401.795549  \n",
      "61409   8701.454361  \n",
      "61410   9536.720451  \n",
      "61411   5355.248554  \n",
      "61412   9958.371322  \n",
      "\n",
      "[61413 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# 读取数据\n",
    "file_network = pd.read_csv(\"london_flows.csv\")\n",
    "\n",
    "# 删除 \"distance\" 列中值为零或为空的行数据\n",
    "file_network = file_network[file_network[\"distance\"] != 0]\n",
    "file_network = file_network[file_network[\"distance\"].notnull()]\n",
    "\n",
    "# 删除 \"population\" 列中值为零或为空的行数据\n",
    "file_network = file_network[file_network[\"population\"] != 0]\n",
    "file_network = file_network[file_network[\"population\"].notnull()]\n",
    "\n",
    "# 删除 \"jobs\" 列中值为零或为空的行数据\n",
    "file_network = file_network[file_network[\"jobs\"] != 0]\n",
    "file_network = file_network[file_network[\"jobs\"].notnull()]\n",
    "\n",
    "# 重置索引\n",
    "file_network = file_network.reset_index(drop=True)\n",
    "\n",
    "# 输出结果\n",
    "print(file_network)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "483195b7-61e5-494c-9c84-868f35347d8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "最大值和最小值的差值为: 15946\n"
     ]
    }
   ],
   "source": [
    "# 计算flows列的最大值和最小值的差值\n",
    "diff_flows = file_network['flows'].max() - file_network['flows'].min()\n",
    "\n",
    "# 输出差值\n",
    "print(\"最大值和最小值的差值为:\", diff_flows)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "018a8860-1c4c-492f-9c3a-29b584b49af8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#set up the metric calculations\n",
    "def CalcRSqaured(observed, estimated):\n",
    "    \"\"\"Calculate the r^2 from a series of observed and estimated target values\n",
    "    inputs:\n",
    "    Observed: Series of actual observed values\n",
    "    estimated: Series of predicted values\"\"\"\n",
    "    \n",
    "    r, p = scipy.stats.pearsonr(observed, estimated)\n",
    "    R2 = r **2\n",
    "    \n",
    "    return R2\n",
    "\n",
    "def CalcRMSE(observed, estimated):\n",
    "    \"\"\"Calculate Root Mean Square Error between a series of observed and estimated values\n",
    "    inputs:\n",
    "    Observed: Series of actual observed values\n",
    "    estimated: Series of predicted values\"\"\"\n",
    "    \n",
    "    res = (observed -estimated)**2\n",
    "    RMSE = round(sqrt(res.mean()), 3)\n",
    "    \n",
    "    return RMSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2419980-413a-443c-8e8c-5c990bef17aa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce019e4d-ea7b-47cc-8ffe-4031705b1c68",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "681bea9b-118f-4823-a5f8-bd19d517c8a0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22bd1bd3-5f44-488d-8925-f8c889e040f1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "462987d0-d186-4a4d-8cd4-16df68675ec3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "de6f21be-6efe-488d-88f4-483b588b011b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>8131.525097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Beckton</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>8510.121774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Blackwall</td>\n",
       "      <td>3</td>\n",
       "      <td>599</td>\n",
       "      <td>665</td>\n",
       "      <td>3775.448872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>5086.514220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canning Town</td>\n",
       "      <td>37</td>\n",
       "      <td>599</td>\n",
       "      <td>15428</td>\n",
       "      <td>2228.923167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Crossharbour</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>1208</td>\n",
       "      <td>6686.475560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Custom House</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>845</td>\n",
       "      <td>3824.855630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Cutty Sark</td>\n",
       "      <td>2</td>\n",
       "      <td>599</td>\n",
       "      <td>1748</td>\n",
       "      <td>8503.898909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Cyprus</td>\n",
       "      <td>7</td>\n",
       "      <td>599</td>\n",
       "      <td>850</td>\n",
       "      <td>6532.099618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Devons Road</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>611</td>\n",
       "      <td>3958.324171</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  station_origin station_destination  flows  population   jobs     distance\n",
       "0     Abbey Road   Bank and Monument      0         599  78549  8131.525097\n",
       "1     Abbey Road             Beckton      1         599    442  8510.121774\n",
       "2     Abbey Road           Blackwall      3         599    665  3775.448872\n",
       "3     Abbey Road        Canary Wharf      1         599  58772  5086.514220\n",
       "4     Abbey Road        Canning Town     37         599  15428  2228.923167\n",
       "5     Abbey Road        Crossharbour      1         599   1208  6686.475560\n",
       "6     Abbey Road        Custom House      0         599    845  3824.855630\n",
       "7     Abbey Road          Cutty Sark      2         599   1748  8503.898909\n",
       "8     Abbey Road              Cyprus      7         599    850  6532.099618\n",
       "9     Abbey Road         Devons Road      1         599    611  3958.324171"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_network.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0a855c2d-a3c9-42a3-8ba0-64c81a33f374",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "      <th>log_pop</th>\n",
       "      <th>log_dis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>8131.525097</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.003504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Beckton</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>8510.121774</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.049012</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  station_origin station_destination  flows  population   jobs     distance  \\\n",
       "0     Abbey Road   Bank and Monument      0         599  78549  8131.525097   \n",
       "1     Abbey Road             Beckton      1         599    442  8510.121774   \n",
       "\n",
       "    log_pop   log_dis  \n",
       "0  6.395262  9.003504  \n",
       "1  6.395262  9.049012  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_network['log_pop'] = np.log(file_network['population'])\n",
    "file_network['log_dis'] = np.log(file_network['distance'])\n",
    "file_network.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5f19fc3-bfaf-4789-a046-f0fab6bbee8b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f5d16b02-ece3-4b6e-89bf-0f2bb81afa69",
   "metadata": {},
   "source": [
    "Tweaking our model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c30cb9b-2405-45cd-ad13-603849af1f1f",
   "metadata": {},
   "source": [
    "# 2. Production-constrained Model\n",
    "\n",
    "\n",
    "\\begin{equation} \\label{eq:1} \\tag{1}\n",
    "T_{ij} = A_i O_i D_j^\\gamma d_{ij}^{-\\beta}\n",
    "\\end{equation}\n",
    "\n",
    "Where\n",
    "\n",
    "\\begin{equation} \\label{eq:2} \\tag{2}\n",
    "O_i = \\sum_j T_{ij}\n",
    "\\end{equation}\n",
    "\n",
    "and\n",
    "\n",
    "\\begin{equation} \\label{eq:3} \\tag{3}\n",
    "A_i = \\frac{1}{\\sum_j D_j^\\gamma d_{ij}^{-\\beta}}\n",
    "\\end{equation}\n",
    "\n",
    "In the production-constrained model, $O_i$ does not have a parameter as it is a known constraint. $A_i$ is known as a <i>balancing factor</i> and is a vector of values which relate to each origin, $i$, which do the equivalent job to $k$ in the unconstrained/total constrained model but ensure that flow estimates from each origin sum to the known totals, $O_i$ rather than just the overall total.\n",
    "\n",
    "Now at this point, we could calculate all of the $O_i$s and $A_i$s by hand for our sample system and then set about guessing/estimating the parameter values for the rest of the model, but as you might have already suspected from last time, we can use Python and `glm` to make it really easy and do all of that for us -woo hoo!\n",
    "\n",
    "We set about re-specifying the Production Constrained model as a Poisson regression model in exactly the same way as we did before. We need to take logs of the right-hand side of the equation and assume that these are logarithmically linked to the Poisson distributed mean ($\\lambda_{ij}$) of the $T_{ij}$ variable. As such, Equation (1) becomes:\n",
    "\n",
    "\\begin{equation} \\label{eq:4} \\tag{4}\n",
    "\\lambda_{ij} = \\exp (\\alpha_i + \\gamma \\ln D_j - \\beta \\ln d_{ij})\n",
    "\\end{equation}\n",
    "\n",
    "In Equation (4) $\\alpha_i$ is the equivalent of the vector of balancing factors $A_i$, but in regression /log-linear modelling terminology can also be described as either <b>dummy variables</b> or <b>fixed effects</b>. In practical terms, what this means is that in our regression model, $\\alpha_i$ is modelled as a [categorical predictor](https://en.wikipedia.org/wiki/Categorical_variable) and therefore in the Poisson regression model, we don't use the numeric values of $O_i$, we can use a categorical identifier for the origin. In terms of the example table above, for Barking and Dagenham we wouldn't use 5675 as we would if we were fitting Equation (1), we would just used 'Barking and Dagenham'.\n",
    "\n",
    "So, let's give this model a whirl..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c06ef1c3-560a-4417-8e5e-b5442958645f",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b06388f3-57d1-4fec-89d7-22160fb682c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Generalized Linear Model Regression Results                  \n",
      "==============================================================================\n",
      "Dep. Variable:                  flows   No. Observations:                61413\n",
      "Model:                            GLM   Df Residuals:                    61013\n",
      "Model Family:                 Poisson   Df Model:                          399\n",
      "Link Function:                    Log   Scale:                          1.0000\n",
      "Method:                          IRLS   Log-Likelihood:            -1.1646e+06\n",
      "Date:                Mon, 08 May 2023   Deviance:                   2.1570e+06\n",
      "Time:                        19:17:09   Pearson chi2:                 3.65e+06\n",
      "No. Iterations:                     8   Pseudo R-squ. (CS):              1.000\n",
      "Covariance Type:            nonrobust                                         \n",
      "====================================================================================================================\n",
      "                                                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------------------------------\n",
      "station_destination[Abbey Road]                      1.1083      0.055     20.188      0.000       1.001       1.216\n",
      "station_destination[Acton Central]                   2.4206      0.038     63.170      0.000       2.345       2.496\n",
      "station_destination[Acton Town]                      1.9909      0.024     81.706      0.000       1.943       2.039\n",
      "station_destination[Aldgate]                         2.8296      0.016    177.243      0.000       2.798       2.861\n",
      "station_destination[Aldgate East]                    2.8103      0.016    176.565      0.000       2.779       2.841\n",
      "station_destination[All Saints]                      1.4035      0.049     28.850      0.000       1.308       1.499\n",
      "station_destination[Alperton]                        1.3069      0.039     33.779      0.000       1.231       1.383\n",
      "station_destination[Amersham]                        0.8319      0.064     13.034      0.000       0.707       0.957\n",
      "station_destination[Anerley]                         1.6348      0.077     21.261      0.000       1.484       1.786\n",
      "station_destination[Angel]                           2.8439      0.016    178.954      0.000       2.813       2.875\n",
      "station_destination[Archway]                         1.8646      0.024     76.524      0.000       1.817       1.912\n",
      "station_destination[Arnos Grove]                     1.0927      0.039     28.378      0.000       1.017       1.168\n",
      "station_destination[Arsenal]                        -0.1970      0.058     -3.426      0.001      -0.310      -0.084\n",
      "station_destination[Baker Street]                    3.4449      0.014    247.277      0.000       3.418       3.472\n",
      "station_destination[Balham]                          2.4818      0.020    123.979      0.000       2.443       2.521\n",
      "station_destination[Bank and Monument]               4.9251      0.012    423.820      0.000       4.902       4.948\n",
      "station_destination[Barbican]                        2.8954      0.015    188.556      0.000       2.865       2.925\n",
      "station_destination[Barking]                         3.1847      0.017    187.855      0.000       3.151       3.218\n",
      "station_destination[Barkingside]                     0.3159      0.063      5.016      0.000       0.192       0.439\n",
      "station_destination[Barons Court]                    2.0512      0.022     94.550      0.000       2.009       2.094\n",
      "station_destination[Bayswater]                       0.6309      0.042     15.054      0.000       0.549       0.713\n",
      "station_destination[Beckton]                         2.0168      0.049     41.197      0.000       1.921       2.113\n",
      "station_destination[Beckton Park]                    0.3872      0.107      3.612      0.000       0.177       0.597\n",
      "station_destination[Becontree]                       0.7167      0.048     14.810      0.000       0.622       0.812\n",
      "station_destination[Belsize Park]                    1.9165      0.024     79.595      0.000       1.869       1.964\n",
      "station_destination[Bermondsey]                      2.0017      0.021     94.622      0.000       1.960       2.043\n",
      "station_destination[Bethnal Green]                   2.3766      0.019    127.503      0.000       2.340       2.413\n",
      "station_destination[Blackfriars]                     3.0919      0.015    208.695      0.000       3.063       3.121\n",
      "station_destination[Blackhorse Road]                 2.2856      0.022    104.447      0.000       2.243       2.329\n",
      "station_destination[Blackwall]                       1.7435      0.040     43.372      0.000       1.665       1.822\n",
      "station_destination[Bond Street]                     3.7380      0.013    283.267      0.000       3.712       3.764\n",
      "station_destination[Borough]                         1.8768      0.021     90.226      0.000       1.836       1.918\n",
      "station_destination[Boston Manor]                    1.3510      0.036     37.969      0.000       1.281       1.421\n",
      "station_destination[Bounds Green]                    1.0427      0.038     27.582      0.000       0.969       1.117\n",
      "station_destination[Bow Church]                      2.2969      0.035     66.260      0.000       2.229       2.365\n",
      "station_destination[Bow Road]                        1.1409      0.031     36.591      0.000       1.080       1.202\n",
      "station_destination[Brent Cross]                     0.6520      0.049     13.404      0.000       0.557       0.747\n",
      "station_destination[Brentwood]                       3.6135      0.039     93.335      0.000       3.538       3.689\n",
      "station_destination[Brixton]                         2.6438      0.018    144.686      0.000       2.608       2.680\n",
      "station_destination[Brockley]                        2.0650      0.048     43.426      0.000       1.972       2.158\n",
      "station_destination[Bromley-by-Bow]                  1.4769      0.027     53.741      0.000       1.423       1.531\n",
      "station_destination[Brondesbury]                     2.1651      0.039     55.396      0.000       2.089       2.242\n",
      "station_destination[Brondesbury Park]                2.3951      0.035     67.950      0.000       2.326       2.464\n",
      "station_destination[Bruce Grove]                     1.9002      0.055     34.798      0.000       1.793       2.007\n",
      "station_destination[Buckhurst Hill]                  0.2116      0.067      3.142      0.002       0.080       0.344\n",
      "station_destination[Burnt Oak]                       1.1387      0.041     27.699      0.000       1.058       1.219\n",
      "station_destination[Bush Hill Park]                  1.4593      0.076     19.130      0.000       1.310       1.609\n",
      "station_destination[Bushey]                          2.6590      0.048     54.999      0.000       2.564       2.754\n",
      "station_destination[Caledonian Road]                 1.4558      0.026     55.569      0.000       1.404       1.507\n",
      "station_destination[Caledonian Road & Barnsbury]     2.7516      0.027    102.369      0.000       2.699       2.804\n",
      "station_destination[Cambridge Heath]                 2.0462      0.048     42.636      0.000       1.952       2.140\n",
      "station_destination[Camden Road]                     3.6418      0.020    183.596      0.000       3.603       3.681\n",
      "station_destination[Camden Town]                     2.6733      0.017    157.512      0.000       2.640       2.707\n",
      "station_destination[Canada Water]                    3.8139      0.013    284.661      0.000       3.788       3.840\n",
      "station_destination[Canary Wharf]                    4.8987      0.012    403.451      0.000       4.875       4.922\n",
      "station_destination[Canning Town]                    3.6395      0.014    258.592      0.000       3.612       3.667\n",
      "station_destination[Cannon Street]                   2.1797      0.018    119.069      0.000       2.144       2.216\n",
      "station_destination[Canonbury]                       2.0296      0.036     56.195      0.000       1.959       2.100\n",
      "station_destination[Canons Park]                     1.0065      0.045     22.220      0.000       0.918       1.095\n",
      "station_destination[Carpenders Park]                 2.2925      0.056     41.264      0.000       2.184       2.401\n",
      "station_destination[Chadwell Heath]                  2.7795      0.044     63.541      0.000       2.694       2.865\n",
      "station_destination[Chalfont & Latimer]              1.7745      0.044     39.980      0.000       1.688       1.862\n",
      "station_destination[Chalk Farm]                      1.3003      0.030     43.683      0.000       1.242       1.359\n",
      "station_destination[Chancery Lane]                   3.4351      0.014    247.664      0.000       3.408       3.462\n",
      "station_destination[Charing Cross]                   2.5735      0.016    157.730      0.000       2.542       2.606\n",
      "station_destination[Chesham]                         1.0052      0.065     15.355      0.000       0.877       1.134\n",
      "station_destination[Cheshunt]                        1.6848      0.094     17.999      0.000       1.501       1.868\n",
      "station_destination[Chigwell]                        0.1287      0.083      1.548      0.122      -0.034       0.292\n",
      "station_destination[Chingford]                       1.7530      0.066     26.531      0.000       1.624       1.883\n",
      "station_destination[Chiswick Park]                   1.6674      0.028     59.047      0.000       1.612       1.723\n",
      "station_destination[Chorleywood]                     2.0006      0.040     50.206      0.000       1.923       2.079\n",
      "station_destination[Clapham Common]                  1.6956      0.025     67.559      0.000       1.646       1.745\n",
      "station_destination[Clapham High Street]             3.3826      0.030    112.686      0.000       3.324       3.441\n",
      "station_destination[Clapham Junction]                4.3665      0.018    237.036      0.000       4.330       4.403\n",
      "station_destination[Clapham North]                   1.1782      0.031     38.416      0.000       1.118       1.238\n",
      "station_destination[Clapham South]                   1.4981      0.028     53.027      0.000       1.443       1.553\n",
      "station_destination[Clapton]                         1.9346      0.050     38.854      0.000       1.837       2.032\n",
      "station_destination[Cockfosters]                     0.3781      0.063      6.001      0.000       0.255       0.502\n",
      "station_destination[Colindale]                       2.1936      0.025     87.489      0.000       2.144       2.243\n",
      "station_destination[Colliers Wood]                   1.1693      0.036     32.442      0.000       1.099       1.240\n",
      "station_destination[Covent Garden]                   2.1247      0.019    112.803      0.000       2.088       2.162\n",
      "station_destination[Crossharbour]                    2.4937      0.031     81.216      0.000       2.433       2.554\n",
      "station_destination[Crouch Hill]                     2.2244      0.051     43.570      0.000       2.124       2.324\n",
      "station_destination[Croxley]                         1.0934      0.056     19.637      0.000       0.984       1.203\n",
      "station_destination[Crystal Palace]                  2.7304      0.046     59.030      0.000       2.640       2.821\n",
      "station_destination[Custom House]                    2.1610      0.036     59.905      0.000       2.090       2.232\n",
      "station_destination[Cutty Sark]                      3.0548      0.026    116.192      0.000       3.003       3.106\n",
      "station_destination[Cyprus]                          2.4980      0.036     69.188      0.000       2.427       2.569\n",
      "station_destination[Dagenham East]                   1.1944      0.041     29.035      0.000       1.114       1.275\n",
      "station_destination[Dagenham Heathway]               1.5952      0.032     49.156      0.000       1.532       1.659\n",
      "station_destination[Dalston Junction]                2.7121      0.030     90.326      0.000       2.653       2.771\n",
      "station_destination[Dalston Kingsland]               2.9624      0.025    120.022      0.000       2.914       3.011\n",
      "station_destination[Debden]                          1.6177      0.036     44.686      0.000       1.547       1.689\n",
      "station_destination[Denmark Hill]                    3.8162      0.023    168.748      0.000       3.772       3.861\n",
      "station_destination[Deptford Bridge]                 2.4348      0.036     67.224      0.000       2.364       2.506\n",
      "station_destination[Devons Road]                     1.8127      0.042     43.262      0.000       1.731       1.895\n",
      "station_destination[Dollis Hill]                     1.0899      0.036     29.985      0.000       1.019       1.161\n",
      "station_destination[Ealing Broadway]                 2.8662      0.019    153.220      0.000       2.830       2.903\n",
      "station_destination[Ealing Common]                   1.2435      0.035     35.422      0.000       1.175       1.312\n",
      "station_destination[Earl's Court]                    2.7425      0.017    163.675      0.000       2.710       2.775\n",
      "station_destination[East Acton]                      1.6182      0.028     57.029      0.000       1.563       1.674\n",
      "station_destination[East Finchley]                   1.5090      0.031     49.182      0.000       1.449       1.569\n",
      "station_destination[East Ham]                        1.9195      0.025     76.626      0.000       1.870       1.969\n",
      "station_destination[East India]                      2.5628      0.028     92.350      0.000       2.508       2.617\n",
      "station_destination[East Putney]                     1.8286      0.026     70.533      0.000       1.778       1.879\n",
      "station_destination[Eastcote]                        0.6559      0.054     12.187      0.000       0.550       0.761\n",
      "station_destination[Edgware]                         1.3598      0.038     35.742      0.000       1.285       1.434\n",
      "station_destination[Edgware Road]                    2.6989      0.017    163.187      0.000       2.666       2.731\n",
      "station_destination[Edmonton Green]                  2.6115      0.038     69.523      0.000       2.538       2.685\n",
      "station_destination[Elephant & Castle]               2.5752      0.017    153.005      0.000       2.542       2.608\n",
      "station_destination[Elm Park]                        0.4547      0.062      7.308      0.000       0.333       0.577\n",
      "station_destination[Elverson Road]                   1.1709      0.067     17.372      0.000       1.039       1.303\n",
      "station_destination[Embankment]                      2.9098      0.015    195.936      0.000       2.881       2.939\n",
      "station_destination[Emerson Park]                    2.3051      0.155     14.906      0.000       2.002       2.608\n",
      "station_destination[Enfield Town]                    2.8887      0.038     75.186      0.000       2.813       2.964\n",
      "station_destination[Epping]                          1.2141      0.047     26.070      0.000       1.123       1.305\n",
      "station_destination[Euston]                          3.5539      0.014    260.687      0.000       3.527       3.581\n",
      "station_destination[Euston Square]                   2.9953      0.016    188.778      0.000       2.964       3.026\n",
      "station_destination[Fairlop]                         0.0630      0.075      0.839      0.402      -0.084       0.210\n",
      "station_destination[Farringdon]                      3.9654      0.013    306.629      0.000       3.940       3.991\n",
      "station_destination[Finchley Central]                2.0420      0.026     79.119      0.000       1.991       2.093\n",
      "station_destination[Finchley Road]                   2.2328      0.021    108.108      0.000       2.192       2.273\n",
      "station_destination[Finchley Road & Frognal]         2.8182      0.028    101.110      0.000       2.764       2.873\n",
      "station_destination[Finsbury Park]                   2.8583      0.017    170.180      0.000       2.825       2.891\n",
      "station_destination[Forest Gate]                     2.7912      0.037     75.865      0.000       2.719       2.863\n",
      "station_destination[Forest Hill]                     2.4941      0.042     59.250      0.000       2.412       2.577\n",
      "station_destination[Fulham Broadway]                 2.3914      0.019    124.087      0.000       2.354       2.429\n",
      "station_destination[Gallions Reach]                  2.1927      0.044     49.972      0.000       2.107       2.279\n",
      "station_destination[Gants Hill]                      0.8999      0.043     21.143      0.000       0.816       0.983\n",
      "station_destination[Gidea Park]                      2.3355      0.059     39.593      0.000       2.220       2.451\n",
      "station_destination[Gloucester Road]                 2.4713      0.018    137.722      0.000       2.436       2.506\n",
      "station_destination[Golders Green]                   1.9325      0.026     74.253      0.000       1.882       1.984\n",
      "station_destination[Goldhawk Road]                   0.2339      0.053      4.391      0.000       0.129       0.338\n",
      "station_destination[Goodge Street]                   2.6081      0.017    155.495      0.000       2.575       2.641\n",
      "station_destination[Goodmayes]                       2.8563      0.040     71.625      0.000       2.778       2.934\n",
      "station_destination[Gospel Oak]                      3.0781      0.025    123.302      0.000       3.029       3.127\n",
      "station_destination[Grange Hill]                    -0.5912      0.115     -5.125      0.000      -0.817      -0.365\n",
      "station_destination[Great Portland Street]           2.7588      0.016    167.212      0.000       2.726       2.791\n",
      "station_destination[Green Park]                      3.9501      0.013    309.373      0.000       3.925       3.975\n",
      "station_destination[Greenford]                       1.6711      0.032     52.467      0.000       1.609       1.734\n",
      "station_destination[Greenwich]                       2.7008      0.031     87.151      0.000       2.640       2.762\n",
      "station_destination[Gunnersbury]                     2.7179      0.019    145.459      0.000       2.681       2.755\n",
      "station_destination[Hackney Central]                 3.2606      0.023    140.576      0.000       3.215       3.306\n",
      "station_destination[Hackney Downs]                   2.8373      0.036     78.133      0.000       2.766       2.908\n",
      "station_destination[Hackney Wick]                    2.4148      0.030     79.558      0.000       2.355       2.474\n",
      "station_destination[Haggerston]                      2.5506      0.031     81.914      0.000       2.490       2.612\n",
      "station_destination[Hainault]                        0.5833      0.054     10.719      0.000       0.477       0.690\n",
      "station_destination[Hammersmith]                     3.8884      0.014    283.253      0.000       3.861       3.915\n",
      "station_destination[Hampstead]                       1.8887      0.025     74.868      0.000       1.839       1.938\n",
      "station_destination[Hampstead Heath]                 3.3866      0.022    153.443      0.000       3.343       3.430\n",
      "station_destination[Hanger Lane]                     1.8669      0.029     65.322      0.000       1.811       1.923\n",
      "station_destination[Harlesden]                       1.8021      0.027     66.260      0.000       1.749       1.855\n",
      "station_destination[Harold Wood]                     3.0364      0.045     67.434      0.000       2.948       3.125\n",
      "station_destination[Harringay Green Lanes]           2.5387      0.044     57.180      0.000       2.452       2.626\n",
      "station_destination[Harrow & Wealdstone]             1.9364      0.030     64.524      0.000       1.878       1.995\n",
      "station_destination[Harrow-on-the-Hill]              2.5086      0.022    114.796      0.000       2.466       2.551\n",
      "station_destination[Hatch End]                       1.0339      0.104      9.907      0.000       0.829       1.239\n",
      "station_destination[Hatton Cross]                    1.9033      0.031     60.953      0.000       1.842       1.964\n",
      "station_destination[Headstone Lane]                  2.2171      0.058     38.215      0.000       2.103       2.331\n",
      "station_destination[Heathrow Terminal 4]             1.3835      0.040     34.586      0.000       1.305       1.462\n",
      "station_destination[Heathrow Terminal 5]             1.7624      0.034     51.186      0.000       1.695       1.830\n",
      "station_destination[Heathrow Terminals 2 & 3]        2.5393      0.024    106.084      0.000       2.492       2.586\n",
      "station_destination[Hendon Central]                  2.0260      0.026     77.790      0.000       1.975       2.077\n",
      "station_destination[Heron Quays]                     3.9118      0.017    236.065      0.000       3.879       3.944\n",
      "station_destination[High Barnet]                     1.5775      0.035     45.477      0.000       1.510       1.646\n",
      "station_destination[High Street Kensington]          2.5422      0.018    143.335      0.000       2.507       2.577\n",
      "station_destination[Highams Park]                    2.0006      0.052     38.472      0.000       1.899       2.103\n",
      "station_destination[Highbury & Islington]            4.0209      0.013    307.865      0.000       3.995       4.046\n",
      "station_destination[Highgate]                        1.0493      0.036     29.005      0.000       0.978       1.120\n",
      "station_destination[Hillingdon]                      0.7442      0.057     12.957      0.000       0.632       0.857\n",
      "station_destination[Holborn]                         3.7648      0.013    288.341      0.000       3.739       3.790\n",
      "station_destination[Holland Park]                    1.6933      0.025     68.158      0.000       1.645       1.742\n",
      "station_destination[Holloway Road]                   1.4050      0.027     52.293      0.000       1.352       1.458\n",
      "station_destination[Homerton]                        2.9070      0.025    115.647      0.000       2.858       2.956\n",
      "station_destination[Honor Oak Park]                  1.8779      0.055     33.953      0.000       1.769       1.986\n",
      "station_destination[Hornchurch]                      1.0926      0.049     22.433      0.000       0.997       1.188\n",
      "station_destination[Hounslow Central]                1.1809      0.040     29.884      0.000       1.103       1.258\n",
      "station_destination[Hounslow East]                   1.3233      0.037     36.225      0.000       1.252       1.395\n",
      "station_destination[Hounslow West]                   0.7077      0.051     13.759      0.000       0.607       0.809\n",
      "station_destination[Hoxton]                          3.1437      0.024    130.097      0.000       3.096       3.191\n",
      "station_destination[Hyde Park Corner]                1.6351      0.023     70.156      0.000       1.589       1.681\n",
      "station_destination[Ickenham]                        0.7436      0.061     12.228      0.000       0.624       0.863\n",
      "station_destination[Ilford]                          3.7701      0.027    139.348      0.000       3.717       3.823\n",
      "station_destination[Imperial Wharf]                  3.2982      0.025    132.144      0.000       3.249       3.347\n",
      "station_destination[Island Gardens]                  2.0726      0.040     52.390      0.000       1.995       2.150\n",
      "station_destination[Kennington]                      0.9279      0.031     29.491      0.000       0.866       0.990\n",
      "station_destination[Kensal Green]                    0.5433      0.048     11.434      0.000       0.450       0.636\n",
      "station_destination[Kensal Rise]                     2.7091      0.029     92.577      0.000       2.652       2.766\n",
      "station_destination[Kensington]                      2.1545      0.024     89.607      0.000       2.107       2.202\n",
      "station_destination[Kentish Town]                    2.1746      0.021    105.140      0.000       2.134       2.215\n",
      "station_destination[Kentish Town West]               2.4930      0.032     78.231      0.000       2.431       2.556\n",
      "station_destination[Kenton]                          1.6986      0.038     44.593      0.000       1.624       1.773\n",
      "station_destination[Kew Gardens]                     1.0152      0.037     27.079      0.000       0.942       1.089\n",
      "station_destination[Kilburn]                         1.7928      0.025     70.363      0.000       1.743       1.843\n",
      "station_destination[Kilburn High Road]               2.0001      0.062     32.124      0.000       1.878       2.122\n",
      "station_destination[Kilburn Park]                    0.9882      0.037     26.888      0.000       0.916       1.060\n",
      "station_destination[King George V]                   2.4949      0.037     67.189      0.000       2.422       2.568\n",
      "station_destination[King's Cross St. Pancras]        4.2139      0.012    337.269      0.000       4.189       4.238\n",
      "station_destination[Kingsbury]                       1.5045      0.034     44.754      0.000       1.439       1.570\n",
      "station_destination[Knightsbridge]                   2.7070      0.017    162.798      0.000       2.674       2.740\n",
      "station_destination[Ladbroke Grove]                  1.7726      0.025     72.098      0.000       1.724       1.821\n",
      "station_destination[Lambeth North]                   0.9290      0.030     31.264      0.000       0.871       0.987\n",
      "station_destination[Lancaster Gate]                  1.5445      0.026     59.168      0.000       1.493       1.596\n",
      "station_destination[Langdon Park]                    2.9510      0.025    118.563      0.000       2.902       3.000\n",
      "station_destination[Latimer Road]                    1.2023      0.032     37.339      0.000       1.139       1.265\n",
      "station_destination[Leicester Square]                2.7998      0.015    182.031      0.000       2.770       2.830\n",
      "station_destination[Lewisham]                        3.6505      0.023    156.668      0.000       3.605       3.696\n",
      "station_destination[Leyton]                          1.5044      0.029     52.194      0.000       1.448       1.561\n",
      "station_destination[Leyton Midland Road]             2.4700      0.049     50.657      0.000       2.374       2.566\n",
      "station_destination[Leytonstone]                     1.8373      0.026     70.249      0.000       1.786       1.889\n",
      "station_destination[Leytonstone High Road]           2.4094      0.058     41.886      0.000       2.297       2.522\n",
      "station_destination[Limehouse]                       3.3877      0.021    158.161      0.000       3.346       3.430\n",
      "station_destination[Liverpool Street]                4.7469      0.012    399.553      0.000       4.724       4.770\n",
      "station_destination[London Bridge]                   4.0728      0.013    323.276      0.000       4.048       4.097\n",
      "station_destination[London City Airport]             3.2533      0.025    128.459      0.000       3.204       3.303\n",
      "station_destination[London Fields]                   2.4709      0.037     66.157      0.000       2.398       2.544\n",
      "station_destination[Loughton]                        1.2625      0.041     30.808      0.000       1.182       1.343\n",
      "station_destination[Maida Vale]                      1.0004      0.034     29.029      0.000       0.933       1.068\n",
      "station_destination[Manor House]                     1.2791      0.030     42.663      0.000       1.220       1.338\n",
      "station_destination[Manor Park]                      2.2762      0.049     46.242      0.000       2.180       2.373\n",
      "station_destination[Mansion House]                   2.7502      0.016    173.502      0.000       2.719       2.781\n",
      "station_destination[Marble Arch]                     2.5898      0.017    151.645      0.000       2.556       2.623\n",
      "station_destination[Maryland]                        1.6106      0.055     29.517      0.000       1.504       1.718\n",
      "station_destination[Marylebone]                      2.2230      0.019    116.650      0.000       2.186       2.260\n",
      "station_destination[Mile End]                        2.2143      0.020    110.790      0.000       2.175       2.253\n",
      "station_destination[Mill Hill East]                  1.2311      0.040     30.615      0.000       1.152       1.310\n",
      "station_destination[Moor Park]                       1.6101      0.044     36.242      0.000       1.523       1.697\n",
      "station_destination[Moorgate]                        3.8050      0.013    297.591      0.000       3.780       3.830\n",
      "station_destination[Morden]                          1.7964      0.029     62.000      0.000       1.740       1.853\n",
      "station_destination[Mornington Crescent]             1.8976      0.022     87.536      0.000       1.855       1.940\n",
      "station_destination[Mudchute]                        1.1922      0.059     20.365      0.000       1.077       1.307\n",
      "station_destination[Neasden]                         0.9962      0.039     25.655      0.000       0.920       1.072\n",
      "station_destination[New Cross]                       3.0247      0.033     91.152      0.000       2.960       3.090\n",
      "station_destination[New Cross Gate]                  2.9941      0.029    101.571      0.000       2.936       3.052\n",
      "station_destination[Newbury Park]                    0.9309      0.044     21.142      0.000       0.845       1.017\n",
      "station_destination[North Acton]                     2.4028      0.021    112.332      0.000       2.361       2.445\n",
      "station_destination[North Ealing]                    0.6899      0.056     12.287      0.000       0.580       0.800\n",
      "station_destination[North Greenwich]                 2.8938      0.017    167.490      0.000       2.860       2.928\n",
      "station_destination[North Harrow]                    0.0513      0.074      0.697      0.486      -0.093       0.195\n",
      "station_destination[North Wembley]                   0.6306      0.054     11.738      0.000       0.525       0.736\n",
      "station_destination[Northfields]                     1.2560      0.036     34.828      0.000       1.185       1.327\n",
      "station_destination[Northolt]                        1.1850      0.041     29.079      0.000       1.105       1.265\n",
      "station_destination[Northwick Park]                  1.9563      0.027     72.435      0.000       1.903       2.009\n",
      "station_destination[Northwood]                       1.8061      0.034     53.559      0.000       1.740       1.872\n",
      "station_destination[Northwood Hills]                 1.0936      0.047     23.307      0.000       1.002       1.186\n",
      "station_destination[Norwood Junction]                2.5077      0.051     49.198      0.000       2.408       2.608\n",
      "station_destination[Notting Hill Gate]               2.5544      0.018    144.614      0.000       2.520       2.589\n",
      "station_destination[Oakwood]                         0.7514      0.050     14.982      0.000       0.653       0.850\n",
      "station_destination[Old Street]                      3.4966      0.014    252.808      0.000       3.469       3.524\n",
      "station_destination[Osterley]                        0.9127      0.045     20.073      0.000       0.824       1.002\n",
      "station_destination[Oval]                            1.7834      0.023     77.885      0.000       1.739       1.828\n",
      "station_destination[Oxford Circus]                   4.4480      0.012    366.003      0.000       4.424       4.472\n",
      "station_destination[Paddington]                      3.8562      0.013    287.713      0.000       3.830       3.882\n",
      "station_destination[Park Royal]                      1.9892      0.028     70.817      0.000       1.934       2.044\n",
      "station_destination[Parsons Green]                   2.0272      0.022     90.315      0.000       1.983       2.071\n",
      "station_destination[Peckham Rye]                     2.8927      0.033     88.849      0.000       2.829       2.957\n",
      "station_destination[Penge West]                      1.3809      0.082     16.756      0.000       1.219       1.542\n",
      "station_destination[Perivale]                        0.9173      0.045     20.367      0.000       0.829       1.006\n",
      "station_destination[Piccadilly Circus]               3.2418      0.014    230.732      0.000       3.214       3.269\n",
      "station_destination[Pimlico]                         2.5208      0.018    143.333      0.000       2.486       2.555\n",
      "station_destination[Pinner]                          0.4788      0.060      8.007      0.000       0.362       0.596\n",
      "station_destination[Plaistow]                        1.1229      0.033     34.012      0.000       1.058       1.188\n",
      "station_destination[Pontoon Dock]                    2.5867      0.032     81.255      0.000       2.524       2.649\n",
      "station_destination[Poplar]                          2.3244      0.030     78.487      0.000       2.266       2.382\n",
      "station_destination[Preston Road]                    0.5411      0.051     10.657      0.000       0.442       0.641\n",
      "station_destination[Prince Regent]                   2.1549      0.038     56.645      0.000       2.080       2.229\n",
      "station_destination[Pudding Mill Lane]               1.4091      0.049     28.529      0.000       1.312       1.506\n",
      "station_destination[Putney Bridge]                   2.0122      0.023     86.762      0.000       1.967       2.058\n",
      "station_destination[Queen's Park]                    1.8303      0.024     74.866      0.000       1.782       1.878\n",
      "station_destination[Queens Road Peckham]             2.5166      0.038     65.809      0.000       2.442       2.592\n",
      "station_destination[Queensbury]                      0.7300      0.049     14.817      0.000       0.633       0.827\n",
      "station_destination[Queensway]                       1.5937      0.026     61.907      0.000       1.543       1.644\n",
      "station_destination[Ravenscourt Park]                1.7136      0.026     66.615      0.000       1.663       1.764\n",
      "station_destination[Rayners Lane]                    0.6781      0.050     13.578      0.000       0.580       0.776\n",
      "station_destination[Rectory Road]                    1.2489      0.069     18.223      0.000       1.115       1.383\n",
      "station_destination[Redbridge]                      -0.1633      0.072     -2.266      0.023      -0.305      -0.022\n",
      "station_destination[Regent's Park]                   2.0319      0.021     98.512      0.000       1.992       2.072\n",
      "station_destination[Richmond]                        2.9846      0.018    163.880      0.000       2.949       3.020\n",
      "station_destination[Rickmansworth]                   1.9282      0.035     55.048      0.000       1.860       1.997\n",
      "station_destination[Roding Valley]                  -0.3566      0.110     -3.248      0.001      -0.572      -0.141\n",
      "station_destination[Romford]                         4.2785      0.024    176.160      0.000       4.231       4.326\n",
      "station_destination[Rotherhithe]                     1.1579      0.057     20.408      0.000       1.047       1.269\n",
      "station_destination[Royal Albert]                    2.1869      0.040     54.908      0.000       2.109       2.265\n",
      "station_destination[Royal Oak]                       0.8474      0.036     23.493      0.000       0.777       0.918\n",
      "station_destination[Royal Victoria]                  2.0044      0.038     53.051      0.000       1.930       2.078\n",
      "station_destination[Ruislip]                         0.5028      0.064      7.910      0.000       0.378       0.627\n",
      "station_destination[Ruislip Gardens]                 0.2548      0.078      3.251      0.001       0.101       0.408\n",
      "station_destination[Ruislip Manor]                   0.8953      0.051     17.561      0.000       0.795       0.995\n",
      "station_destination[Russell Square]                  2.3272      0.018    130.119      0.000       2.292       2.362\n",
      "station_destination[Seven Kings]                     2.6462      0.044     60.452      0.000       2.560       2.732\n",
      "station_destination[Seven Sisters]                   3.3743      0.015    219.721      0.000       3.344       3.404\n",
      "station_destination[Shadwell]                        3.7512      0.016    235.837      0.000       3.720       3.782\n",
      "station_destination[Shenfield]                       3.8922      0.035    111.226      0.000       3.824       3.961\n",
      "station_destination[Shepherd's Bush]                 3.2268      0.015    210.617      0.000       3.197       3.257\n",
      "station_destination[Shepherd's Bush Market]          0.3102      0.050      6.157      0.000       0.211       0.409\n",
      "station_destination[Shoreditch High Street]          4.3770      0.016    273.622      0.000       4.346       4.408\n",
      "station_destination[Silver Street]                   2.9127      0.034     84.760      0.000       2.845       2.980\n",
      "station_destination[Sloane Square]                   2.8864      0.016    182.147      0.000       2.855       2.917\n",
      "station_destination[Snaresbrook]                     0.7476      0.046     16.327      0.000       0.658       0.837\n",
      "station_destination[South Acton]                     2.7870      0.034     81.909      0.000       2.720       2.854\n",
      "station_destination[South Ealing]                    0.9750      0.040     24.115      0.000       0.896       1.054\n",
      "station_destination[South Hampstead]                 1.9269      0.066     29.188      0.000       1.797       2.056\n",
      "station_destination[South Harrow]                    0.7578      0.052     14.496      0.000       0.655       0.860\n",
      "station_destination[South Kensington]                3.5391      0.014    253.404      0.000       3.512       3.566\n",
      "station_destination[South Kenton]                    0.5637      0.063      8.938      0.000       0.440       0.687\n",
      "station_destination[South Quay]                      3.7518      0.018    206.184      0.000       3.716       3.787\n",
      "station_destination[South Ruislip]                   0.6121      0.060     10.181      0.000       0.494       0.730\n",
      "station_destination[South Tottenham]                 2.6918      0.044     61.041      0.000       2.605       2.778\n",
      "station_destination[South Wimbledon]                 1.7417      0.030     58.733      0.000       1.684       1.800\n",
      "station_destination[South Woodford]                  1.1129      0.038     29.214      0.000       1.038       1.188\n",
      "station_destination[Southbury]                       2.7069      0.045     60.514      0.000       2.619       2.795\n",
      "station_destination[Southfields]                     1.5926      0.030     53.615      0.000       1.534       1.651\n",
      "station_destination[Southgate]                       1.2871      0.036     35.794      0.000       1.217       1.358\n",
      "station_destination[Southwark]                       2.9601      0.015    198.793      0.000       2.931       2.989\n",
      "station_destination[St James Street]                 1.1146      0.075     14.945      0.000       0.968       1.261\n",
      "station_destination[St. James's Park]                3.2578      0.014    229.771      0.000       3.230       3.286\n",
      "station_destination[St. John's Wood]                 2.3191      0.020    118.247      0.000       2.281       2.358\n",
      "station_destination[St. Paul's]                      3.2768      0.014    231.174      0.000       3.249       3.305\n",
      "station_destination[Stamford Brook]                  0.9453      0.038     25.167      0.000       0.872       1.019\n",
      "station_destination[Stamford Hill]                   1.7769      0.054     32.627      0.000       1.670       1.884\n",
      "station_destination[Stanmore]                        1.6294      0.034     47.622      0.000       1.562       1.696\n",
      "station_destination[Star Lane]                       2.2247      0.033     68.159      0.000       2.161       2.289\n",
      "station_destination[Stepney Green]                   1.4906      0.026     57.824      0.000       1.440       1.541\n",
      "station_destination[Stockwell]                       1.3600      0.027     49.727      0.000       1.306       1.414\n",
      "station_destination[Stoke Newington]                 2.0646      0.047     43.857      0.000       1.972       2.157\n",
      "station_destination[Stonebridge Park]                1.0639      0.039     27.339      0.000       0.988       1.140\n",
      "station_destination[Stratford]                       4.8431      0.012    395.543      0.000       4.819       4.867\n",
      "station_destination[Stratford High Street]           1.8399      0.037     49.514      0.000       1.767       1.913\n",
      "station_destination[Stratford International]         2.7958      0.028    100.755      0.000       2.741       2.850\n",
      "station_destination[Sudbury Hill]                    0.3709      0.061      6.050      0.000       0.251       0.491\n",
      "station_destination[Sudbury Town]                    0.2147      0.069      3.120      0.002       0.080       0.350\n",
      "station_destination[Surrey Quays]                    2.2971      0.033     69.072      0.000       2.232       2.362\n",
      "station_destination[Swiss Cottage]                   1.9530      0.023     85.734      0.000       1.908       1.998\n",
      "station_destination[Sydenham]                        2.3864      0.045     52.455      0.000       2.297       2.476\n",
      "station_destination[Temple]                          2.6062      0.017    157.532      0.000       2.574       2.639\n",
      "station_destination[Theobalds Grove]                 1.9820      0.075     26.387      0.000       1.835       2.129\n",
      "station_destination[Theydon Bois]                   -0.1297      0.102     -1.274      0.203      -0.329       0.070\n",
      "station_destination[Tooting Bec]                     1.3855      0.031     45.039      0.000       1.325       1.446\n",
      "station_destination[Tooting Broadway]                2.7097      0.019    142.160      0.000       2.672       2.747\n",
      "station_destination[Tottenham Court Road]            3.6020      0.013    270.443      0.000       3.576       3.628\n",
      "station_destination[Tottenham Hale]                  2.3393      0.021    110.437      0.000       2.298       2.381\n",
      "station_destination[Totteridge & Whetstone]          0.3530      0.060      5.855      0.000       0.235       0.471\n",
      "station_destination[Tower Gateway]                   3.7514      0.021    182.104      0.000       3.711       3.792\n",
      "station_destination[Tower Hill]                      2.8084      0.016    178.662      0.000       2.778       2.839\n",
      "station_destination[Tufnell Park]                    0.4715      0.044     10.731      0.000       0.385       0.558\n",
      "station_destination[Turkey Street]                   2.7388      0.048     56.756      0.000       2.644       2.833\n",
      "station_destination[Turnham Green]                   1.5409      0.028     54.594      0.000       1.486       1.596\n",
      "station_destination[Turnpike Lane]                   1.1419      0.034     33.697      0.000       1.075       1.208\n",
      "station_destination[Upminster]                       1.9615      0.032     60.813      0.000       1.898       2.025\n",
      "station_destination[Upminster Bridge]                1.5875      0.044     36.267      0.000       1.502       1.673\n",
      "station_destination[Upney]                           0.7780      0.047     16.556      0.000       0.686       0.870\n",
      "station_destination[Upper Holloway]                  2.7247      0.035     77.220      0.000       2.656       2.794\n",
      "station_destination[Upton Park]                      1.6234      0.027     59.316      0.000       1.570       1.677\n",
      "station_destination[Uxbridge]                        3.1428      0.020    159.283      0.000       3.104       3.181\n",
      "station_destination[Vauxhall]                        3.6661      0.014    263.155      0.000       3.639       3.693\n",
      "station_destination[Victoria]                        4.2530      0.013    338.729      0.000       4.228       4.278\n",
      "station_destination[Walthamstow Central]             2.8945      0.018    158.900      0.000       2.859       2.930\n",
      "station_destination[Walthamstow Queens Road]         3.8442      0.030    127.539      0.000       3.785       3.903\n",
      "station_destination[Wandsworth Road]                 2.5007      0.046     54.153      0.000       2.410       2.591\n",
      "station_destination[Wanstead]                        0.5599      0.050     11.131      0.000       0.461       0.658\n",
      "station_destination[Wanstead Park]                   2.6696      0.050     53.053      0.000       2.571       2.768\n",
      "station_destination[Wapping]                         2.4423      0.032     75.461      0.000       2.379       2.506\n",
      "station_destination[Warren Street]                   3.5217      0.014    260.170      0.000       3.495       3.548\n",
      "station_destination[Warwick Avenue]                  1.1356      0.031     36.207      0.000       1.074       1.197\n",
      "station_destination[Waterloo]                        3.8570      0.013    298.088      0.000       3.832       3.882\n",
      "station_destination[Watford]                         2.0570      0.035     59.332      0.000       1.989       2.125\n",
      "station_destination[Watford High Street]             3.2417      0.038     86.246      0.000       3.168       3.315\n",
      "station_destination[Watford Junction]                3.9300      0.030    132.637      0.000       3.872       3.988\n",
      "station_destination[Wembley Central]                 1.6605      0.030     55.406      0.000       1.602       1.719\n",
      "station_destination[Wembley Park]                    3.0471      0.018    170.890      0.000       3.012       3.082\n",
      "station_destination[West Acton]                      0.7767      0.047     16.587      0.000       0.685       0.869\n",
      "station_destination[West Brompton]                   2.6011      0.017    149.962      0.000       2.567       2.635\n",
      "station_destination[West Croydon]                    4.2534      0.025    169.545      0.000       4.204       4.303\n",
      "station_destination[West Finchley]                  -0.7793      0.106     -7.385      0.000      -0.986      -0.572\n",
      "station_destination[West Ham]                        2.5744      0.018    145.222      0.000       2.540       2.609\n",
      "station_destination[West Hampstead]                  2.7331      0.017    156.854      0.000       2.699       2.767\n",
      "station_destination[West Harrow]                    -0.3864      0.091     -4.230      0.000      -0.565      -0.207\n",
      "station_destination[West India Quay]                 1.0675      0.051     20.919      0.000       0.968       1.168\n",
      "station_destination[West Kensington]                 1.2481      0.030     42.204      0.000       1.190       1.306\n",
      "station_destination[West Ruislip]                    0.4384      0.073      6.015      0.000       0.296       0.581\n",
      "station_destination[West Silvertown]                 2.2975      0.035     65.221      0.000       2.228       2.366\n",
      "station_destination[Westbourne Park]                 1.3082      0.030     44.173      0.000       1.250       1.366\n",
      "station_destination[Westferry]                       2.3683      0.030     78.419      0.000       2.309       2.427\n",
      "station_destination[Westminster]                     3.3590      0.014    244.275      0.000       3.332       3.386\n",
      "station_destination[White City]                      2.9033      0.017    166.184      0.000       2.869       2.938\n",
      "station_destination[White Hart Lane]                 2.3542      0.041     57.276      0.000       2.274       2.435\n",
      "station_destination[Whitechapel]                     3.5915      0.014    263.550      0.000       3.565       3.618\n",
      "station_destination[Willesden Green]                 0.9771      0.037     26.653      0.000       0.905       1.049\n",
      "station_destination[Willesden Junction]              2.5409      0.019    130.800      0.000       2.503       2.579\n",
      "station_destination[Wimbledon]                       3.2473      0.018    185.525      0.000       3.213       3.282\n",
      "station_destination[Wimbledon Park]                  1.0127      0.043     23.732      0.000       0.929       1.096\n",
      "station_destination[Wood Green]                      1.9332      0.025     78.439      0.000       1.885       1.982\n",
      "station_destination[Wood Lane]                       1.6601      0.028     59.885      0.000       1.606       1.714\n",
      "station_destination[Wood Street]                     1.9876      0.051     38.946      0.000       1.888       2.088\n",
      "station_destination[Woodford]                        1.1172      0.040     28.251      0.000       1.040       1.195\n",
      "station_destination[Woodgrange Park]                 2.1595      0.065     33.085      0.000       2.032       2.287\n",
      "station_destination[Woodside Park]                   1.2422      0.039     32.181      0.000       1.167       1.318\n",
      "station_destination[Woolwich Arsenal]                4.4584      0.019    234.340      0.000       4.421       4.496\n",
      "log_pop                                              0.7451      0.001   1086.217      0.000       0.744       0.746\n",
      "log_dis                                             -0.6351      0.001   -643.760      0.000      -0.637      -0.633\n",
      "====================================================================================================================\n"
     ]
    }
   ],
   "source": [
    "# create the formula (the \"-1\" indicates no intercept in the regression model).\n",
    "formula = 'flows ~ station_destination + log_pop + log_dis-1' \n",
    "#run a production constrained sim\n",
    "prodSim = smf.glm(formula = formula, data=file_network, family=sm.families.Poisson()).fit()\n",
    "#let's have a look at it's summary\n",
    "print(prodSim.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9dd3f921-b8f6-4b64-93e7-65c5494eb4a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "      <th>log_pop</th>\n",
       "      <th>log_dis</th>\n",
       "      <th>O_i</th>\n",
       "      <th>D_j</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>8131.525097</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.003504</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Beckton</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>8510.121774</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.049012</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Blackwall</td>\n",
       "      <td>3</td>\n",
       "      <td>599</td>\n",
       "      <td>665</td>\n",
       "      <td>3775.448872</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>8.236275</td>\n",
       "      <td>599</td>\n",
       "      <td>665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>5086.514220</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>8.534348</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canning Town</td>\n",
       "      <td>37</td>\n",
       "      <td>599</td>\n",
       "      <td>15428</td>\n",
       "      <td>2228.923167</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>7.709274</td>\n",
       "      <td>599</td>\n",
       "      <td>15428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61408</th>\n",
       "      <td>Woolwich Arsenal</td>\n",
       "      <td>Tower Gateway</td>\n",
       "      <td>127</td>\n",
       "      <td>7892</td>\n",
       "      <td>3342</td>\n",
       "      <td>13401.795549</td>\n",
       "      <td>8.973605</td>\n",
       "      <td>9.503144</td>\n",
       "      <td>7892</td>\n",
       "      <td>3342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61409</th>\n",
       "      <td>Woolwich Arsenal</td>\n",
       "      <td>West Ham</td>\n",
       "      <td>608</td>\n",
       "      <td>7892</td>\n",
       "      <td>5487</td>\n",
       "      <td>8701.454361</td>\n",
       "      <td>8.973605</td>\n",
       "      <td>9.071245</td>\n",
       "      <td>7892</td>\n",
       "      <td>5487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61410</th>\n",
       "      <td>Woolwich Arsenal</td>\n",
       "      <td>West India Quay</td>\n",
       "      <td>6</td>\n",
       "      <td>7892</td>\n",
       "      <td>400</td>\n",
       "      <td>9536.720451</td>\n",
       "      <td>8.973605</td>\n",
       "      <td>9.162905</td>\n",
       "      <td>7892</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61411</th>\n",
       "      <td>Woolwich Arsenal</td>\n",
       "      <td>West Silvertown</td>\n",
       "      <td>81</td>\n",
       "      <td>7892</td>\n",
       "      <td>893</td>\n",
       "      <td>5355.248554</td>\n",
       "      <td>8.973605</td>\n",
       "      <td>8.585832</td>\n",
       "      <td>7892</td>\n",
       "      <td>893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61412</th>\n",
       "      <td>Woolwich Arsenal</td>\n",
       "      <td>Westferry</td>\n",
       "      <td>76</td>\n",
       "      <td>7892</td>\n",
       "      <td>1250</td>\n",
       "      <td>9958.371322</td>\n",
       "      <td>8.973605</td>\n",
       "      <td>9.206169</td>\n",
       "      <td>7892</td>\n",
       "      <td>1250</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61413 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         station_origin station_destination  flows  population   jobs  \\\n",
       "0            Abbey Road   Bank and Monument      0         599  78549   \n",
       "1            Abbey Road             Beckton      1         599    442   \n",
       "2            Abbey Road           Blackwall      3         599    665   \n",
       "3            Abbey Road        Canary Wharf      1         599  58772   \n",
       "4            Abbey Road        Canning Town     37         599  15428   \n",
       "...                 ...                 ...    ...         ...    ...   \n",
       "61408  Woolwich Arsenal       Tower Gateway    127        7892   3342   \n",
       "61409  Woolwich Arsenal            West Ham    608        7892   5487   \n",
       "61410  Woolwich Arsenal     West India Quay      6        7892    400   \n",
       "61411  Woolwich Arsenal     West Silvertown     81        7892    893   \n",
       "61412  Woolwich Arsenal           Westferry     76        7892   1250   \n",
       "\n",
       "           distance   log_pop   log_dis   O_i    D_j  \n",
       "0       8131.525097  6.395262  9.003504   599  78549  \n",
       "1       8510.121774  6.395262  9.049012   599    442  \n",
       "2       3775.448872  6.395262  8.236275   599    665  \n",
       "3       5086.514220  6.395262  8.534348   599  58772  \n",
       "4       2228.923167  6.395262  7.709274   599  15428  \n",
       "...             ...       ...       ...   ...    ...  \n",
       "61408  13401.795549  8.973605  9.503144  7892   3342  \n",
       "61409   8701.454361  8.973605  9.071245  7892   5487  \n",
       "61410   9536.720451  8.973605  9.162905  7892    400  \n",
       "61411   5355.248554  8.973605  8.585832  7892    893  \n",
       "61412   9958.371322  8.973605  9.206169  7892   1250  \n",
       "\n",
       "[61413 rows x 10 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create some Oi and Dj columns in the dataframe and store row and column totals in them:\n",
    "#to create O_i, take cdatasub ...then... group by origcodenew ...then... summarise by calculating the sum of Total\n",
    "O_i = pd.DataFrame(file_network.groupby([\"station_origin\"])[\"flows\"].agg(np.sum))\n",
    "O_i.rename(columns={\"flows\":\"O_i\"}, inplace = True)\n",
    "file_network = file_network.merge(O_i, on = \"station_origin\", how = \"left\" )\n",
    "\n",
    "D_j = pd.DataFrame(file_network.groupby([\"station_destination\"])[\"flows\"].agg(np.sum))\n",
    "D_j.rename(columns={\"flows\":\"D_j\"}, inplace = True)\n",
    "file_network = file_network.merge(D_j, on = \"station_destination\", how = \"left\" )\n",
    "file_network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "705997dd-9c9a-4685-84c4-fd8e457a883b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_9594/3990801324.py:7: FutureWarning: The default value of regex will change from True to False in a future version.\n",
      "  coefs[\"coef\"] = coefs[\"coef\"].str.replace(x, \"\")\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "      <th>log_pop</th>\n",
       "      <th>log_dis</th>\n",
       "      <th>O_i</th>\n",
       "      <th>D_j</th>\n",
       "      <th>alpha_i</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>8131.525097</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.003504</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>4.925085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Beckton</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>8510.121774</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.049012</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>2.016788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Blackwall</td>\n",
       "      <td>3</td>\n",
       "      <td>599</td>\n",
       "      <td>665</td>\n",
       "      <td>3775.448872</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>8.236275</td>\n",
       "      <td>599</td>\n",
       "      <td>665</td>\n",
       "      <td>1.743497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>5086.514220</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>8.534348</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>4.898678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canning Town</td>\n",
       "      <td>37</td>\n",
       "      <td>599</td>\n",
       "      <td>15428</td>\n",
       "      <td>2228.923167</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>7.709274</td>\n",
       "      <td>599</td>\n",
       "      <td>15428</td>\n",
       "      <td>3.639456</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  station_origin station_destination  flows  population   jobs     distance  \\\n",
       "0     Abbey Road   Bank and Monument      0         599  78549  8131.525097   \n",
       "1     Abbey Road             Beckton      1         599    442  8510.121774   \n",
       "2     Abbey Road           Blackwall      3         599    665  3775.448872   \n",
       "3     Abbey Road        Canary Wharf      1         599  58772  5086.514220   \n",
       "4     Abbey Road        Canning Town     37         599  15428  2228.923167   \n",
       "\n",
       "    log_pop   log_dis  O_i    D_j   alpha_i  \n",
       "0  6.395262  9.003504  599  78549  4.925085  \n",
       "1  6.395262  9.049012  599    442  2.016788  \n",
       "2  6.395262  8.236275  599    665  1.743497  \n",
       "3  6.395262  8.534348  599  58772  4.898678  \n",
       "4  6.395262  7.709274  599  15428  3.639456  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We can do this by pulling out the parameter values\n",
    "coefs = pd.DataFrame(prodSim.params)\n",
    "coefs.reset_index(inplace=True)\n",
    "coefs.rename(columns = {0:\"alpha_i\", \"index\":\"coef\"}, inplace = True)\n",
    "to_repl = [\"(station_destination)\", \"\\[\", \"\\]\"]\n",
    "for x in to_repl:\n",
    "    coefs[\"coef\"] = coefs[\"coef\"].str.replace(x, \"\")\n",
    "#then once you have done this you can join them back into the dataframes\n",
    "file_network = file_network.merge(coefs, left_on=\"station_destination\", right_on=\"coef\", how = \"left\")\n",
    "file_network.drop(columns = [\"coef\"], inplace = True)\n",
    "#check this has worked\n",
    "file_network.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31a6e62f-41db-42ac-871c-f1941c6acffe",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ab6196cf-16d5-4602-b71f-4d49ad45ec33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "station_destination[Abbey Road]          1.108254\n",
       "station_destination[Acton Central]       2.420602\n",
       "station_destination[Acton Town]          1.990907\n",
       "station_destination[Aldgate]             2.829568\n",
       "station_destination[Aldgate East]        2.810273\n",
       "                                           ...   \n",
       "station_destination[Woodgrange Park]     2.159501\n",
       "station_destination[Woodside Park]       1.242249\n",
       "station_destination[Woolwich Arsenal]    4.458413\n",
       "log_pop                                  0.745118\n",
       "log_dis                                 -0.635148\n",
       "Length: 400, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prodSim.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2a80665f-d6ba-41b3-8f29-22555dc2939a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# save the parameter\n",
    "fenlei = prodSim.params[0:398]\n",
    "alpha = prodSim.params[398]\n",
    "beta = -prodSim.params[399]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e8c15008-561e-4aaf-b92f-b6d339af9410",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6351480703753105"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "2bfdac4b-d34b-4d5c-9524-f0cf54b18682",
   "metadata": {},
   "outputs": [],
   "source": [
    "#set up the metric calculations\n",
    "def CalcRSqaured(observed, estimated):\n",
    "    \"\"\"Calculate the r^2 from a series of observed and estimated target values\n",
    "    inputs:\n",
    "    Observed: Series of actual observed values\n",
    "    estimated: Series of predicted values\"\"\"\n",
    "    \n",
    "    r, p = scipy.stats.pearsonr(observed, estimated)\n",
    "    R2 = r **2\n",
    "    \n",
    "    return R2\n",
    "\n",
    "def CalcRMSE(observed, estimated):\n",
    "    \"\"\"Calculate Root Mean Square Error between a series of observed and estimated values\n",
    "    inputs:\n",
    "    Observed: Series of actual observed values\n",
    "    estimated: Series of predicted values\"\"\"\n",
    "    \n",
    "    res = (observed -estimated)**2\n",
    "    RMSE = round(sqrt(res.mean()), 3)\n",
    "    \n",
    "    return RMSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b12b109-dae1-4974-bb8e-9c2dc84994e9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4d064dbd-1f06-4bea-ac1a-b592115583c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "      <th>log_pop</th>\n",
       "      <th>log_dis</th>\n",
       "      <th>O_i</th>\n",
       "      <th>D_j</th>\n",
       "      <th>alpha_i</th>\n",
       "      <th>prodsimest1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>8131.525097</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.003504</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>4.925085</td>\n",
       "      <td>53.077519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Beckton</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>8510.121774</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.049012</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>2.016788</td>\n",
       "      <td>2.813846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Blackwall</td>\n",
       "      <td>3</td>\n",
       "      <td>599</td>\n",
       "      <td>665</td>\n",
       "      <td>3775.448872</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>8.236275</td>\n",
       "      <td>599</td>\n",
       "      <td>665</td>\n",
       "      <td>1.743497</td>\n",
       "      <td>3.587552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>5086.514220</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>8.534348</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>4.898678</td>\n",
       "      <td>69.639350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canning Town</td>\n",
       "      <td>37</td>\n",
       "      <td>599</td>\n",
       "      <td>15428</td>\n",
       "      <td>2228.923167</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>7.709274</td>\n",
       "      <td>599</td>\n",
       "      <td>15428</td>\n",
       "      <td>3.639456</td>\n",
       "      <td>33.386510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Crossharbour</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>1208</td>\n",
       "      <td>6686.475560</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>8.807842</td>\n",
       "      <td>599</td>\n",
       "      <td>1208</td>\n",
       "      <td>2.493650</td>\n",
       "      <td>5.283523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Custom House</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>845</td>\n",
       "      <td>3824.855630</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>8.249276</td>\n",
       "      <td>599</td>\n",
       "      <td>845</td>\n",
       "      <td>2.160960</td>\n",
       "      <td>5.401489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Cutty Sark</td>\n",
       "      <td>2</td>\n",
       "      <td>599</td>\n",
       "      <td>1748</td>\n",
       "      <td>8503.898909</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.048280</td>\n",
       "      <td>599</td>\n",
       "      <td>1748</td>\n",
       "      <td>3.054832</td>\n",
       "      <td>7.949122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Cyprus</td>\n",
       "      <td>7</td>\n",
       "      <td>599</td>\n",
       "      <td>850</td>\n",
       "      <td>6532.099618</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>8.784484</td>\n",
       "      <td>599</td>\n",
       "      <td>850</td>\n",
       "      <td>2.498031</td>\n",
       "      <td>5.386035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Devons Road</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>611</td>\n",
       "      <td>3958.324171</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>8.283576</td>\n",
       "      <td>599</td>\n",
       "      <td>611</td>\n",
       "      <td>1.812741</td>\n",
       "      <td>3.730979</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  station_origin station_destination  flows  population   jobs     distance  \\\n",
       "0     Abbey Road   Bank and Monument      0         599  78549  8131.525097   \n",
       "1     Abbey Road             Beckton      1         599    442  8510.121774   \n",
       "2     Abbey Road           Blackwall      3         599    665  3775.448872   \n",
       "3     Abbey Road        Canary Wharf      1         599  58772  5086.514220   \n",
       "4     Abbey Road        Canning Town     37         599  15428  2228.923167   \n",
       "5     Abbey Road        Crossharbour      1         599   1208  6686.475560   \n",
       "6     Abbey Road        Custom House      0         599    845  3824.855630   \n",
       "7     Abbey Road          Cutty Sark      2         599   1748  8503.898909   \n",
       "8     Abbey Road              Cyprus      7         599    850  6532.099618   \n",
       "9     Abbey Road         Devons Road      1         599    611  3958.324171   \n",
       "\n",
       "    log_pop   log_dis  O_i    D_j   alpha_i  prodsimest1  \n",
       "0  6.395262  9.003504  599  78549  4.925085    53.077519  \n",
       "1  6.395262  9.049012  599    442  2.016788     2.813846  \n",
       "2  6.395262  8.236275  599    665  1.743497     3.587552  \n",
       "3  6.395262  8.534348  599  58772  4.898678    69.639350  \n",
       "4  6.395262  7.709274  599  15428  3.639456    33.386510  \n",
       "5  6.395262  8.807842  599   1208  2.493650     5.283523  \n",
       "6  6.395262  8.249276  599    845  2.160960     5.401489  \n",
       "7  6.395262  9.048280  599   1748  3.054832     7.949122  \n",
       "8  6.395262  8.784484  599    850  2.498031     5.386035  \n",
       "9  6.395262  8.283576  599    611  1.812741     3.730979  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_network[\"prodsimest1\"] = np.exp(file_network[\"alpha_i\"]+alpha*file_network[\"log_pop\"] \n",
    "                                 - beta*file_network[\"log_dis\"])\n",
    "#or you could do it the easy way like we did last week with the fitted column (See previous practical)\n",
    "file_network.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d129d967-4011-43cc-a7f9-bb2183ec1469",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>station_destination</th>\n",
       "      <th>Abbey Road</th>\n",
       "      <th>Acton Central</th>\n",
       "      <th>Acton Town</th>\n",
       "      <th>Aldgate</th>\n",
       "      <th>Aldgate East</th>\n",
       "      <th>All Saints</th>\n",
       "      <th>Alperton</th>\n",
       "      <th>Amersham</th>\n",
       "      <th>Anerley</th>\n",
       "      <th>Angel</th>\n",
       "      <th>...</th>\n",
       "      <th>Wimbledon</th>\n",
       "      <th>Wimbledon Park</th>\n",
       "      <th>Wood Green</th>\n",
       "      <th>Wood Lane</th>\n",
       "      <th>Wood Street</th>\n",
       "      <th>Woodford</th>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <th>Woodside Park</th>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_origin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Abbey Road</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31.0</td>\n",
       "      <td>591.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Central</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>586.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Town</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.0</td>\n",
       "      <td>...</td>\n",
       "      <td>26.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3546.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>62.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>36.0</td>\n",
       "      <td>...</td>\n",
       "      <td>19.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5702.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate East</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6029.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodford</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19.0</td>\n",
       "      <td>...</td>\n",
       "      <td>19.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3431.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>163.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodside Park</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.0</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2404.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2179.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>345.0</td>\n",
       "      <td>747.0</td>\n",
       "      <td>2196.0</td>\n",
       "      <td>7788.0</td>\n",
       "      <td>7932.0</td>\n",
       "      <td>442.0</td>\n",
       "      <td>740.0</td>\n",
       "      <td>261.0</td>\n",
       "      <td>173.0</td>\n",
       "      <td>8099.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6295.0</td>\n",
       "      <td>597.0</td>\n",
       "      <td>2150.0</td>\n",
       "      <td>1578.0</td>\n",
       "      <td>404.0</td>\n",
       "      <td>707.0</td>\n",
       "      <td>243.0</td>\n",
       "      <td>741.0</td>\n",
       "      <td>4429.0</td>\n",
       "      <td>1542244.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>399 rows × 399 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "station_destination  Abbey Road  Acton Central  Acton Town  Aldgate  \\\n",
       "station_origin                                                        \n",
       "Abbey Road                  NaN            NaN         NaN      NaN   \n",
       "Acton Central               NaN            NaN         NaN      NaN   \n",
       "Acton Town                  NaN            NaN         NaN     16.0   \n",
       "Aldgate                     NaN            NaN         6.0      NaN   \n",
       "Aldgate East                NaN            NaN         6.0     68.0   \n",
       "...                         ...            ...         ...      ...   \n",
       "Woodford                    NaN            NaN         6.0     20.0   \n",
       "Woodgrange Park             NaN            2.0         NaN      NaN   \n",
       "Woodside Park               NaN            NaN         5.0     14.0   \n",
       "Woolwich Arsenal            7.0            NaN         NaN      NaN   \n",
       "All                       345.0          747.0      2196.0   7788.0   \n",
       "\n",
       "station_destination  Aldgate East  All Saints  Alperton  Amersham  Anerley  \\\n",
       "station_origin                                                               \n",
       "Abbey Road                    NaN         NaN       NaN       NaN      NaN   \n",
       "Acton Central                 NaN         NaN       NaN       NaN      NaN   \n",
       "Acton Town                   16.0         NaN       8.0       1.0      NaN   \n",
       "Aldgate                      62.0         NaN       NaN       1.0      NaN   \n",
       "Aldgate East                  NaN         NaN       3.0       1.0      NaN   \n",
       "...                           ...         ...       ...       ...      ...   \n",
       "Woodford                     21.0         NaN       NaN       NaN      NaN   \n",
       "Woodgrange Park               NaN         NaN       NaN       NaN      NaN   \n",
       "Woodside Park                13.0         NaN       2.0       NaN      NaN   \n",
       "Woolwich Arsenal              NaN         9.0       NaN       NaN      NaN   \n",
       "All                        7932.0       442.0     740.0     261.0    173.0   \n",
       "\n",
       "station_destination   Angel  ...  Wimbledon  Wimbledon Park  Wood Green  \\\n",
       "station_origin               ...                                          \n",
       "Abbey Road              NaN  ...        NaN             NaN         NaN   \n",
       "Acton Central           NaN  ...        NaN             NaN         NaN   \n",
       "Acton Town             17.0  ...       26.0             3.0         5.0   \n",
       "Aldgate                36.0  ...       19.0             NaN         6.0   \n",
       "Aldgate East           37.0  ...       20.0             2.0         7.0   \n",
       "...                     ...  ...        ...             ...         ...   \n",
       "Woodford               19.0  ...       19.0             NaN         7.0   \n",
       "Woodgrange Park         NaN  ...        NaN             NaN         NaN   \n",
       "Woodside Park          16.0  ...       15.0             NaN         5.0   \n",
       "Woolwich Arsenal        NaN  ...        NaN             NaN         NaN   \n",
       "All                  8099.0  ...     6295.0           597.0      2150.0   \n",
       "\n",
       "station_destination  Wood Lane  Wood Street  Woodford  Woodgrange Park  \\\n",
       "station_origin                                                           \n",
       "Abbey Road                 NaN          NaN       NaN              NaN   \n",
       "Acton Central              NaN          NaN       NaN              3.0   \n",
       "Acton Town                 9.0          NaN       2.0              NaN   \n",
       "Aldgate                    5.0          NaN       2.0              NaN   \n",
       "Aldgate East               5.0          NaN       3.0              NaN   \n",
       "...                        ...          ...       ...              ...   \n",
       "Woodford                   NaN          NaN       NaN              NaN   \n",
       "Woodgrange Park            NaN          NaN       NaN              NaN   \n",
       "Woodside Park              NaN          NaN       NaN              NaN   \n",
       "Woolwich Arsenal           NaN          NaN       NaN              NaN   \n",
       "All                     1578.0        404.0     707.0            243.0   \n",
       "\n",
       "station_destination  Woodside Park  Woolwich Arsenal        All  \n",
       "station_origin                                                   \n",
       "Abbey Road                     NaN              31.0      591.0  \n",
       "Acton Central                  NaN               NaN      586.0  \n",
       "Acton Town                     2.0               NaN     3546.0  \n",
       "Aldgate                        3.0               NaN     5702.0  \n",
       "Aldgate East                   3.0               NaN     6029.0  \n",
       "...                            ...               ...        ...  \n",
       "Woodford                       NaN               NaN     3431.0  \n",
       "Woodgrange Park                NaN               NaN      163.0  \n",
       "Woodside Park                  NaN               NaN     2404.0  \n",
       "Woolwich Arsenal               NaN               NaN     2179.0  \n",
       "All                          741.0            4429.0  1542244.0  \n",
       "\n",
       "[399 rows x 399 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#first round the estimates\n",
    "file_network[\"prodsimest1\"] = round(file_network[\"prodsimest1\"],0)\n",
    "#now we can create a pivot tabel to turn the paired list into a matrix, and compute the margins as well\n",
    "test = file_network.pivot_table(values =\"prodsimest1\", index=\"station_origin\", columns = \"station_destination\",\n",
    "                            aggfunc=np.sum, margins=True)\n",
    "test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "502fac9f-09ba-4670-b8f7-9e7ff2635ce4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>station_destination</th>\n",
       "      <th>Abbey Road</th>\n",
       "      <th>Acton Central</th>\n",
       "      <th>Acton Town</th>\n",
       "      <th>Aldgate</th>\n",
       "      <th>Aldgate East</th>\n",
       "      <th>All Saints</th>\n",
       "      <th>Alperton</th>\n",
       "      <th>Amersham</th>\n",
       "      <th>Anerley</th>\n",
       "      <th>Angel</th>\n",
       "      <th>...</th>\n",
       "      <th>Wimbledon</th>\n",
       "      <th>Wimbledon Park</th>\n",
       "      <th>Wood Green</th>\n",
       "      <th>Wood Lane</th>\n",
       "      <th>Wood Street</th>\n",
       "      <th>Woodford</th>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <th>Woodside Park</th>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_origin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Abbey Road</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.0</td>\n",
       "      <td>599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Central</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Town</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.0</td>\n",
       "      <td>...</td>\n",
       "      <td>77.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate East</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.0</td>\n",
       "      <td>...</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodford</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodside Park</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>59.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>345.0</td>\n",
       "      <td>750.0</td>\n",
       "      <td>2202.0</td>\n",
       "      <td>7782.0</td>\n",
       "      <td>7932.0</td>\n",
       "      <td>444.0</td>\n",
       "      <td>741.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>173.0</td>\n",
       "      <td>8103.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6295.0</td>\n",
       "      <td>596.0</td>\n",
       "      <td>2146.0</td>\n",
       "      <td>1578.0</td>\n",
       "      <td>404.0</td>\n",
       "      <td>706.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>745.0</td>\n",
       "      <td>4428.0</td>\n",
       "      <td>1542283</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>399 rows × 399 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "station_destination  Abbey Road  Acton Central  Acton Town  Aldgate  \\\n",
       "station_origin                                                        \n",
       "Abbey Road                  NaN            NaN         NaN      NaN   \n",
       "Acton Central               NaN            NaN         NaN      NaN   \n",
       "Acton Town                  NaN            NaN         NaN      3.0   \n",
       "Aldgate                     NaN            NaN         0.0      NaN   \n",
       "Aldgate East                NaN            NaN         2.0      0.0   \n",
       "...                         ...            ...         ...      ...   \n",
       "Woodford                    NaN            NaN         2.0      5.0   \n",
       "Woodgrange Park             NaN            0.0         NaN      NaN   \n",
       "Woodside Park               NaN            NaN         1.0     26.0   \n",
       "Woolwich Arsenal           20.0            NaN         NaN      NaN   \n",
       "All                       345.0          750.0      2202.0   7782.0   \n",
       "\n",
       "station_destination  Aldgate East  All Saints  Alperton  Amersham  Anerley  \\\n",
       "station_origin                                                               \n",
       "Abbey Road                    NaN         NaN       NaN       NaN      NaN   \n",
       "Acton Central                 NaN         NaN       NaN       NaN      NaN   \n",
       "Acton Town                   17.0         NaN      35.0       0.0      NaN   \n",
       "Aldgate                       0.0         NaN       NaN       0.0      NaN   \n",
       "Aldgate East                  NaN         NaN       0.0       0.0      NaN   \n",
       "...                           ...         ...       ...       ...      ...   \n",
       "Woodford                     47.0         NaN       NaN       NaN      NaN   \n",
       "Woodgrange Park               NaN         NaN       NaN       NaN      NaN   \n",
       "Woodside Park                11.0         NaN       0.0       NaN      NaN   \n",
       "Woolwich Arsenal              NaN         7.0       NaN       NaN      NaN   \n",
       "All                        7932.0       444.0     741.0     256.0    173.0   \n",
       "\n",
       "station_destination   Angel  ...  Wimbledon  Wimbledon Park  Wood Green  \\\n",
       "station_origin               ...                                          \n",
       "Abbey Road              NaN  ...        NaN             NaN         NaN   \n",
       "Acton Central           NaN  ...        NaN             NaN         NaN   \n",
       "Acton Town             11.0  ...       77.0             3.0         6.0   \n",
       "Aldgate                17.0  ...        0.0             NaN         4.0   \n",
       "Aldgate East           20.0  ...       24.0             0.0         0.0   \n",
       "...                     ...  ...        ...             ...         ...   \n",
       "Woodford               22.0  ...        2.0             NaN         1.0   \n",
       "Woodgrange Park         NaN  ...        NaN             NaN         NaN   \n",
       "Woodside Park          59.0  ...        0.0             NaN         0.0   \n",
       "Woolwich Arsenal        NaN  ...        NaN             NaN         NaN   \n",
       "All                  8103.0  ...     6295.0           596.0      2146.0   \n",
       "\n",
       "station_destination  Wood Lane  Wood Street  Woodford  Woodgrange Park  \\\n",
       "station_origin                                                           \n",
       "Abbey Road                 NaN          NaN       NaN              NaN   \n",
       "Acton Central              NaN          NaN       NaN              0.0   \n",
       "Acton Town                 9.0          NaN       0.0              NaN   \n",
       "Aldgate                    8.0          NaN       0.0              NaN   \n",
       "Aldgate East              12.0          NaN       1.0              NaN   \n",
       "...                        ...          ...       ...              ...   \n",
       "Woodford                   NaN          NaN       NaN              NaN   \n",
       "Woodgrange Park            NaN          NaN       NaN              NaN   \n",
       "Woodside Park              NaN          NaN       NaN              NaN   \n",
       "Woolwich Arsenal           NaN          NaN       NaN              NaN   \n",
       "All                     1578.0        404.0     706.0            242.0   \n",
       "\n",
       "station_destination  Woodside Park  Woolwich Arsenal      All  \n",
       "station_origin                                                 \n",
       "Abbey Road                     NaN              32.0      599  \n",
       "Acton Central                  NaN               NaN     1224  \n",
       "Acton Town                     0.0               NaN     3745  \n",
       "Aldgate                        0.0               NaN     2886  \n",
       "Aldgate East                   1.0               NaN     3172  \n",
       "...                            ...               ...      ...  \n",
       "Woodford                       NaN               NaN     4868  \n",
       "Woodgrange Park                NaN               NaN      530  \n",
       "Woodside Park                  NaN               NaN     3093  \n",
       "Woolwich Arsenal               NaN               NaN     7892  \n",
       "All                          745.0            4428.0  1542283  \n",
       "\n",
       "[399 rows x 399 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#first round the estimates\n",
    "file_network[\"prodsimest1\"] = round(file_network[\"prodsimest1\"],0)\n",
    "#now we can create a pivot tabel to turn the paired list into a matrix, and compute the margins as well\n",
    "ori_test = file_network.pivot_table(values =\"flows\", index=\"station_origin\", columns = \"station_destination\",\n",
    "                            aggfunc=np.sum, margins=True)\n",
    "ori_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a9392534-f06b-49d2-a01f-a583119b052c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def CalcRSquared(observed, estimated):\n",
    "    \"\"\"Calculate the r^2 from a series of observed and estimated target values\n",
    "    inputs:\n",
    "    Observed: Series of actual observed values\n",
    "    estimated: Series of predicted values\"\"\"\n",
    "    \n",
    "    r, p = scipy.stats.pearsonr(observed, estimated)\n",
    "    R2 = r **2\n",
    "    \n",
    "    return R2\n",
    "\n",
    "def CalcRMSE(observed, estimated):\n",
    "    \"\"\"Calculate Root Mean Square Error between a series of observed and estimated values\n",
    "    inputs:\n",
    "    Observed: Series of actual observed values\n",
    "    estimated: Series of predicted values\"\"\"\n",
    "    \n",
    "    res = (observed -estimated)**2\n",
    "    RMSE = round(sqrt(res.mean()), 3)\n",
    "    \n",
    "    return RMSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "39c0a6ee-1be2-4ee3-b40b-c45acf362ce0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R2 of the result is: 0.3499323840939915\n",
      "The RMSE of the reult is: 106.013\n"
     ]
    }
   ],
   "source": [
    "R2 = CalcRSquared(file_network[\"flows\"], file_network[\"prodsimest1\"])\n",
    "RMSE = CalcRMSE(file_network[\"flows\"], file_network[\"prodsimest1\"])\n",
    "print('The R2 of the result is: ' + str(R2) + '\\n' +\n",
    "      'The RMSE of the reult is: ' + str(RMSE))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce41194c-225b-4303-96f2-0a61b5ef9fd6",
   "metadata": {},
   "source": [
    "Scenario A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5f90d61e-6022-4fa6-9117-8734d3a0bfe3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "      <th>log_pop</th>\n",
       "      <th>log_dis</th>\n",
       "      <th>O_i</th>\n",
       "      <th>D_j</th>\n",
       "      <th>alpha_i</th>\n",
       "      <th>prodsimest1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>5086.514220</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>8.534348</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>4.898678</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>Acton Town</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>57</td>\n",
       "      <td>3745</td>\n",
       "      <td>58772</td>\n",
       "      <td>20398.165882</td>\n",
       "      <td>8.228177</td>\n",
       "      <td>9.923200</td>\n",
       "      <td>3745</td>\n",
       "      <td>58772</td>\n",
       "      <td>4.898678</td>\n",
       "      <td>113.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    station_origin station_destination  flows  population   jobs  \\\n",
       "3       Abbey Road        Canary Wharf      1         599  58772   \n",
       "126     Acton Town        Canary Wharf     57        3745  58772   \n",
       "\n",
       "         distance   log_pop   log_dis   O_i    D_j   alpha_i  prodsimest1  \n",
       "3     5086.514220  6.395262  8.534348   599  58772  4.898678         70.0  \n",
       "126  20398.165882  8.228177  9.923200  3745  58772  4.898678        113.0  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_network_a = file_network.copy()\n",
    "file_network_a.loc[file_network_a['station_destination'] == 'Canary Wharf'].head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d4563e9f-88aa-448f-8a93-945f14d7040d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "      <th>log_pop</th>\n",
       "      <th>log_dis</th>\n",
       "      <th>O_i</th>\n",
       "      <th>D_j</th>\n",
       "      <th>alpha_i</th>\n",
       "      <th>prodsimest1</th>\n",
       "      <th>jobs_a</th>\n",
       "      <th>log_jobs_a</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>5086.514220</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>8.534348</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>4.898678</td>\n",
       "      <td>70.0</td>\n",
       "      <td>29386</td>\n",
       "      <td>10.288274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>Acton Town</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>57</td>\n",
       "      <td>3745</td>\n",
       "      <td>58772</td>\n",
       "      <td>20398.165882</td>\n",
       "      <td>8.228177</td>\n",
       "      <td>9.923200</td>\n",
       "      <td>3745</td>\n",
       "      <td>58772</td>\n",
       "      <td>4.898678</td>\n",
       "      <td>113.0</td>\n",
       "      <td>29386</td>\n",
       "      <td>10.288274</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    station_origin station_destination  flows  population   jobs  \\\n",
       "3       Abbey Road        Canary Wharf      1         599  58772   \n",
       "126     Acton Town        Canary Wharf     57        3745  58772   \n",
       "\n",
       "         distance   log_pop   log_dis   O_i    D_j   alpha_i  prodsimest1  \\\n",
       "3     5086.514220  6.395262  8.534348   599  58772  4.898678         70.0   \n",
       "126  20398.165882  8.228177  9.923200  3745  58772  4.898678        113.0   \n",
       "\n",
       "     jobs_a  log_jobs_a  \n",
       "3     29386   10.288274  \n",
       "126   29386   10.288274  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Change the job at Canary Wharf\n",
    "file_network_a['jobs_a'] = file_network_a['jobs']\n",
    "file_network_a.loc[file_network_a['station_destination'] == 'Canary Wharf', 'jobs_a'] = file_network_a['jobs'] / 2\n",
    "file_network_a['log_jobs_a'] = np.log(file_network_a['jobs_a'])\n",
    "file_network_a.loc[file_network_a['station_destination'] == 'Canary Wharf'].head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "068f5b27-031f-4c24-b216-88d1c7814db8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "      <th>log_pop</th>\n",
       "      <th>log_dis</th>\n",
       "      <th>O_i</th>\n",
       "      <th>D_j</th>\n",
       "      <th>alpha_i</th>\n",
       "      <th>prodsimest1</th>\n",
       "      <th>jobs_a</th>\n",
       "      <th>log_jobs_a</th>\n",
       "      <th>Ai1</th>\n",
       "      <th>A_i2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>8131.525097</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.003504</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>4.925085</td>\n",
       "      <td>53.0</td>\n",
       "      <td>78549</td>\n",
       "      <td>11.271478</td>\n",
       "      <td>0.385455</td>\n",
       "      <td>0.001753</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Beckton</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>8510.121774</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.049012</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>2.016788</td>\n",
       "      <td>3.0</td>\n",
       "      <td>442</td>\n",
       "      <td>6.091310</td>\n",
       "      <td>0.374473</td>\n",
       "      <td>0.017000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  station_origin station_destination  flows  population   jobs     distance  \\\n",
       "0     Abbey Road   Bank and Monument      0         599  78549  8131.525097   \n",
       "1     Abbey Road             Beckton      1         599    442  8510.121774   \n",
       "\n",
       "    log_pop   log_dis  O_i    D_j   alpha_i  prodsimest1  jobs_a  log_jobs_a  \\\n",
       "0  6.395262  9.003504  599  78549  4.925085         53.0   78549   11.271478   \n",
       "1  6.395262  9.049012  599    442  2.016788          3.0     442    6.091310   \n",
       "\n",
       "        Ai1      A_i2  \n",
       "0  0.385455  0.001753  \n",
       "1  0.374473  0.017000  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#calculate some new D_j_1_gamma and dist_beta values\n",
    "D_j_1_gamma = file_network_a[\"population\"]**alpha\n",
    "sa_beta = file_network_a[\"distance\"]**-beta\n",
    "#calcualte the first stage of the Ai values\n",
    "file_network_a[\"Ai1\"] = D_j_1_gamma * sa_beta\n",
    "#now do the sum over all js bit\n",
    "A_i = pd.DataFrame(file_network_a.groupby([\"station_destination\"])[\"Ai1\"].agg(np.sum))\n",
    "#now divide into 1\n",
    "A_i[\"Ai1\"] = 1/A_i[\"Ai1\"]\n",
    "A_i.rename(columns={\"Ai1\":\"A_i2\"}, inplace=True)\n",
    "#and write the A_i values back into the dataframe\n",
    "file_network_a = file_network_a.merge(A_i, left_on=\"station_destination\", right_index=True, how=\"left\")\n",
    "file_network_a.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "17c2236e-ae2d-40a1-8603-fd4c68af083d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#to check everything works, recreate the original estimates\n",
    "file_network_a[\"prodsimest4\"] = file_network_a[\"A_i2\"]*file_network_a[\"O_i\"]*D_j_1_gamma*sa_beta\n",
    "#round\n",
    "file_network_a[\"prodsimest4\"] = round(file_network_a[\"prodsimest4\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "55ff31b6-10c0-45b8-9198-5ba33964e21f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>station_destination</th>\n",
       "      <th>Abbey Road</th>\n",
       "      <th>Acton Central</th>\n",
       "      <th>Acton Town</th>\n",
       "      <th>Aldgate</th>\n",
       "      <th>Aldgate East</th>\n",
       "      <th>All Saints</th>\n",
       "      <th>Alperton</th>\n",
       "      <th>Amersham</th>\n",
       "      <th>Anerley</th>\n",
       "      <th>Angel</th>\n",
       "      <th>...</th>\n",
       "      <th>Wimbledon</th>\n",
       "      <th>Wimbledon Park</th>\n",
       "      <th>Wood Green</th>\n",
       "      <th>Wood Lane</th>\n",
       "      <th>Wood Street</th>\n",
       "      <th>Woodford</th>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <th>Woodside Park</th>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_origin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Abbey Road</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>106.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Central</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>507.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Town</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3363.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2507.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate East</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3075.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodford</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.0</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3863.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodside Park</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1321.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <td>168.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>167.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7541.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>28051.0</td>\n",
       "      <td>12979.0</td>\n",
       "      <td>12445.0</td>\n",
       "      <td>16398.0</td>\n",
       "      <td>15800.0</td>\n",
       "      <td>17741.0</td>\n",
       "      <td>14386.0</td>\n",
       "      <td>15383.0</td>\n",
       "      <td>9837.0</td>\n",
       "      <td>14845.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13180.0</td>\n",
       "      <td>12476.0</td>\n",
       "      <td>13665.0</td>\n",
       "      <td>14074.0</td>\n",
       "      <td>18417.0</td>\n",
       "      <td>14830.0</td>\n",
       "      <td>4946.0</td>\n",
       "      <td>14752.0</td>\n",
       "      <td>19546.0</td>\n",
       "      <td>6109428.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>399 rows × 399 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "station_destination  Abbey Road  Acton Central  Acton Town  Aldgate  \\\n",
       "station_origin                                                        \n",
       "Abbey Road                  NaN            NaN         NaN      NaN   \n",
       "Acton Central               NaN            NaN         NaN      NaN   \n",
       "Acton Town                  NaN            NaN         NaN      8.0   \n",
       "Aldgate                     NaN            NaN         7.0      NaN   \n",
       "Aldgate East                NaN            NaN         9.0     28.0   \n",
       "...                         ...            ...         ...      ...   \n",
       "Woodford                    NaN            NaN        13.0     13.0   \n",
       "Woodgrange Park             NaN            1.0         NaN      NaN   \n",
       "Woodside Park               NaN            NaN         6.0      5.0   \n",
       "Woolwich Arsenal          168.0            NaN         NaN      NaN   \n",
       "All                     28051.0        12979.0     12445.0  16398.0   \n",
       "\n",
       "station_destination  Aldgate East  All Saints  Alperton  Amersham  Anerley  \\\n",
       "station_origin                                                               \n",
       "Abbey Road                    NaN         NaN       NaN       NaN      NaN   \n",
       "Acton Central                 NaN         NaN       NaN       NaN      NaN   \n",
       "Acton Town                    7.0         NaN      39.0      19.0      NaN   \n",
       "Aldgate                      23.0         NaN       NaN      11.0      NaN   \n",
       "Aldgate East                  NaN         NaN      11.0      13.0      NaN   \n",
       "...                           ...         ...       ...       ...      ...   \n",
       "Woodford                     13.0         NaN       NaN       NaN      NaN   \n",
       "Woodgrange Park               NaN         NaN       NaN       NaN      NaN   \n",
       "Woodside Park                 5.0         NaN       9.0       NaN      NaN   \n",
       "Woolwich Arsenal              NaN       167.0       NaN       NaN      NaN   \n",
       "All                       15800.0     17741.0   14386.0   15383.0   9837.0   \n",
       "\n",
       "station_destination    Angel  ...  Wimbledon  Wimbledon Park  Wood Green  \\\n",
       "station_origin                ...                                          \n",
       "Abbey Road               NaN  ...        NaN             NaN         NaN   \n",
       "Acton Central            NaN  ...        NaN             NaN         NaN   \n",
       "Acton Town               8.0  ...       15.0            18.0         9.0   \n",
       "Aldgate                 13.0  ...        9.0             NaN         9.0   \n",
       "Aldgate East            15.0  ...       10.0            12.0        10.0   \n",
       "...                      ...  ...        ...             ...         ...   \n",
       "Woodford                11.0  ...       15.0             NaN        15.0   \n",
       "Woodgrange Park          NaN  ...        NaN             NaN         NaN   \n",
       "Woodside Park            6.0  ...        8.0             NaN         7.0   \n",
       "Woolwich Arsenal         NaN  ...        NaN             NaN         NaN   \n",
       "All                  14845.0  ...    13180.0         12476.0     13665.0   \n",
       "\n",
       "station_destination  Wood Lane  Wood Street  Woodford  Woodgrange Park  \\\n",
       "station_origin                                                           \n",
       "Abbey Road                 NaN          NaN       NaN              NaN   \n",
       "Acton Central              NaN          NaN       NaN             14.0   \n",
       "Acton Town                22.0          NaN      10.0              NaN   \n",
       "Aldgate                    9.0          NaN      10.0              NaN   \n",
       "Aldgate East              11.0          NaN      13.0              NaN   \n",
       "...                        ...          ...       ...              ...   \n",
       "Woodford                   NaN          NaN       NaN              NaN   \n",
       "Woodgrange Park            NaN          NaN       NaN              NaN   \n",
       "Woodside Park              NaN          NaN       NaN              NaN   \n",
       "Woolwich Arsenal           NaN          NaN       NaN              NaN   \n",
       "All                    14074.0      18417.0   14830.0           4946.0   \n",
       "\n",
       "station_destination  Woodside Park  Woolwich Arsenal        All  \n",
       "station_origin                                                   \n",
       "Abbey Road                     NaN               4.0      106.0  \n",
       "Acton Central                  NaN               NaN      507.0  \n",
       "Acton Town                    13.0               NaN     3363.0  \n",
       "Aldgate                       10.0               NaN     2507.0  \n",
       "Aldgate East                  12.0               NaN     3075.0  \n",
       "...                            ...               ...        ...  \n",
       "Woodford                       NaN               NaN     3863.0  \n",
       "Woodgrange Park                NaN               NaN       90.0  \n",
       "Woodside Park                  NaN               NaN     1321.0  \n",
       "Woolwich Arsenal               NaN               NaN     7541.0  \n",
       "All                        14752.0           19546.0  6109428.0  \n",
       "\n",
       "[399 rows x 399 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_network_a_out = file_network_a.pivot_table(values =\"prodsimest4\", index=\"station_origin\", columns = \"station_destination\",\n",
    "                            aggfunc=np.sum, margins=True)\n",
    "file_network_a_out"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c113050-0868-4e9e-90fc-c66cb2add002",
   "metadata": {},
   "source": [
    "Scenario B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "965c5250-7f9c-4a0c-a023-24772e8c0580",
   "metadata": {},
   "outputs": [],
   "source": [
    "beta1= 0.7\n",
    "beta2= 0.9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4e53c47f-c9ba-4eca-a78f-4f272a48390c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "      <th>log_pop</th>\n",
       "      <th>log_dis</th>\n",
       "      <th>O_i</th>\n",
       "      <th>D_j</th>\n",
       "      <th>alpha_i</th>\n",
       "      <th>prodsimest1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>8131.525097</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.003504</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>4.925085</td>\n",
       "      <td>53.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Beckton</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>8510.121774</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.049012</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>2.016788</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  station_origin station_destination  flows  population   jobs     distance  \\\n",
       "0     Abbey Road   Bank and Monument      0         599  78549  8131.525097   \n",
       "1     Abbey Road             Beckton      1         599    442  8510.121774   \n",
       "\n",
       "    log_pop   log_dis  O_i    D_j   alpha_i  prodsimest1  \n",
       "0  6.395262  9.003504  599  78549  4.925085         53.0  \n",
       "1  6.395262  9.049012  599    442  2.016788          3.0  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_network_b = file_network.copy()\n",
    "file_network_b.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "560f988f-ab4c-4150-b569-11f4f43c9df0",
   "metadata": {},
   "outputs": [],
   "source": [
    "file_network_b['log_dis_b1'] = np.log(file_network_b['distance']*beta1)\n",
    "file_network_b['log_dis_b2'] = np.log(file_network_b['distance']*beta2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f4f58c9f-3d1b-4ed9-b98b-b1340d90090d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "      <th>log_pop</th>\n",
       "      <th>log_dis</th>\n",
       "      <th>O_i</th>\n",
       "      <th>D_j</th>\n",
       "      <th>alpha_i</th>\n",
       "      <th>prodsimest1</th>\n",
       "      <th>log_dis_b1</th>\n",
       "      <th>log_dis_b2</th>\n",
       "      <th>sim_pre_b1</th>\n",
       "      <th>sim_pre_b2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>8131.525097</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.003504</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>4.925085</td>\n",
       "      <td>53.0</td>\n",
       "      <td>8.646829</td>\n",
       "      <td>8.898143</td>\n",
       "      <td>66.572719</td>\n",
       "      <td>56.750984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Beckton</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>8510.121774</td>\n",
       "      <td>6.395262</td>\n",
       "      <td>9.049012</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>2.016788</td>\n",
       "      <td>3.0</td>\n",
       "      <td>8.692337</td>\n",
       "      <td>8.943651</td>\n",
       "      <td>3.529279</td>\n",
       "      <td>3.008590</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  station_origin station_destination  flows  population   jobs     distance  \\\n",
       "0     Abbey Road   Bank and Monument      0         599  78549  8131.525097   \n",
       "1     Abbey Road             Beckton      1         599    442  8510.121774   \n",
       "\n",
       "    log_pop   log_dis  O_i    D_j   alpha_i  prodsimest1  log_dis_b1  \\\n",
       "0  6.395262  9.003504  599  78549  4.925085         53.0    8.646829   \n",
       "1  6.395262  9.049012  599    442  2.016788          3.0    8.692337   \n",
       "\n",
       "   log_dis_b2  sim_pre_b1  sim_pre_b2  \n",
       "0    8.898143   66.572719   56.750984  \n",
       "1    8.943651    3.529279    3.008590  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_network_b[\"sim_pre_b1\"] = np.exp(file_network_b[\"alpha_i\"] + alpha*file_network_b['log_pop'] - beta*file_network_b[\"log_dis_b1\"])\n",
    "file_network_b[\"sim_pre_b2\"] = np.exp(file_network_b[\"alpha_i\"] + alpha*file_network_b['log_pop'] - beta*file_network_b[\"log_dis_b2\"])\n",
    "file_network_b.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "55228dc7-f573-4894-9de6-e9096c566777",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>station_destination</th>\n",
       "      <th>Abbey Road</th>\n",
       "      <th>Acton Central</th>\n",
       "      <th>Acton Town</th>\n",
       "      <th>Aldgate</th>\n",
       "      <th>Aldgate East</th>\n",
       "      <th>All Saints</th>\n",
       "      <th>Alperton</th>\n",
       "      <th>Amersham</th>\n",
       "      <th>Anerley</th>\n",
       "      <th>Angel</th>\n",
       "      <th>...</th>\n",
       "      <th>Wimbledon</th>\n",
       "      <th>Wimbledon Park</th>\n",
       "      <th>Wood Green</th>\n",
       "      <th>Wood Lane</th>\n",
       "      <th>Wood Street</th>\n",
       "      <th>Woodford</th>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <th>Woodside Park</th>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_origin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Abbey Road</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.0</td>\n",
       "      <td>599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Central</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Town</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.0</td>\n",
       "      <td>...</td>\n",
       "      <td>77.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate East</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.0</td>\n",
       "      <td>...</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodford</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodside Park</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>59.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <td>20.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>345.0</td>\n",
       "      <td>750.0</td>\n",
       "      <td>2202.0</td>\n",
       "      <td>7782.0</td>\n",
       "      <td>7932.0</td>\n",
       "      <td>444.0</td>\n",
       "      <td>741.0</td>\n",
       "      <td>256.0</td>\n",
       "      <td>173.0</td>\n",
       "      <td>8103.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6295.0</td>\n",
       "      <td>596.0</td>\n",
       "      <td>2146.0</td>\n",
       "      <td>1578.0</td>\n",
       "      <td>404.0</td>\n",
       "      <td>706.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>745.0</td>\n",
       "      <td>4428.0</td>\n",
       "      <td>1542283</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>399 rows × 399 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "station_destination  Abbey Road  Acton Central  Acton Town  Aldgate  \\\n",
       "station_origin                                                        \n",
       "Abbey Road                  NaN            NaN         NaN      NaN   \n",
       "Acton Central               NaN            NaN         NaN      NaN   \n",
       "Acton Town                  NaN            NaN         NaN      3.0   \n",
       "Aldgate                     NaN            NaN         0.0      NaN   \n",
       "Aldgate East                NaN            NaN         2.0      0.0   \n",
       "...                         ...            ...         ...      ...   \n",
       "Woodford                    NaN            NaN         2.0      5.0   \n",
       "Woodgrange Park             NaN            0.0         NaN      NaN   \n",
       "Woodside Park               NaN            NaN         1.0     26.0   \n",
       "Woolwich Arsenal           20.0            NaN         NaN      NaN   \n",
       "All                       345.0          750.0      2202.0   7782.0   \n",
       "\n",
       "station_destination  Aldgate East  All Saints  Alperton  Amersham  Anerley  \\\n",
       "station_origin                                                               \n",
       "Abbey Road                    NaN         NaN       NaN       NaN      NaN   \n",
       "Acton Central                 NaN         NaN       NaN       NaN      NaN   \n",
       "Acton Town                   17.0         NaN      35.0       0.0      NaN   \n",
       "Aldgate                       0.0         NaN       NaN       0.0      NaN   \n",
       "Aldgate East                  NaN         NaN       0.0       0.0      NaN   \n",
       "...                           ...         ...       ...       ...      ...   \n",
       "Woodford                     47.0         NaN       NaN       NaN      NaN   \n",
       "Woodgrange Park               NaN         NaN       NaN       NaN      NaN   \n",
       "Woodside Park                11.0         NaN       0.0       NaN      NaN   \n",
       "Woolwich Arsenal              NaN         7.0       NaN       NaN      NaN   \n",
       "All                        7932.0       444.0     741.0     256.0    173.0   \n",
       "\n",
       "station_destination   Angel  ...  Wimbledon  Wimbledon Park  Wood Green  \\\n",
       "station_origin               ...                                          \n",
       "Abbey Road              NaN  ...        NaN             NaN         NaN   \n",
       "Acton Central           NaN  ...        NaN             NaN         NaN   \n",
       "Acton Town             11.0  ...       77.0             3.0         6.0   \n",
       "Aldgate                17.0  ...        0.0             NaN         4.0   \n",
       "Aldgate East           20.0  ...       24.0             0.0         0.0   \n",
       "...                     ...  ...        ...             ...         ...   \n",
       "Woodford               22.0  ...        2.0             NaN         1.0   \n",
       "Woodgrange Park         NaN  ...        NaN             NaN         NaN   \n",
       "Woodside Park          59.0  ...        0.0             NaN         0.0   \n",
       "Woolwich Arsenal        NaN  ...        NaN             NaN         NaN   \n",
       "All                  8103.0  ...     6295.0           596.0      2146.0   \n",
       "\n",
       "station_destination  Wood Lane  Wood Street  Woodford  Woodgrange Park  \\\n",
       "station_origin                                                           \n",
       "Abbey Road                 NaN          NaN       NaN              NaN   \n",
       "Acton Central              NaN          NaN       NaN              0.0   \n",
       "Acton Town                 9.0          NaN       0.0              NaN   \n",
       "Aldgate                    8.0          NaN       0.0              NaN   \n",
       "Aldgate East              12.0          NaN       1.0              NaN   \n",
       "...                        ...          ...       ...              ...   \n",
       "Woodford                   NaN          NaN       NaN              NaN   \n",
       "Woodgrange Park            NaN          NaN       NaN              NaN   \n",
       "Woodside Park              NaN          NaN       NaN              NaN   \n",
       "Woolwich Arsenal           NaN          NaN       NaN              NaN   \n",
       "All                     1578.0        404.0     706.0            242.0   \n",
       "\n",
       "station_destination  Woodside Park  Woolwich Arsenal      All  \n",
       "station_origin                                                 \n",
       "Abbey Road                     NaN              32.0      599  \n",
       "Acton Central                  NaN               NaN     1224  \n",
       "Acton Town                     0.0               NaN     3745  \n",
       "Aldgate                        0.0               NaN     2886  \n",
       "Aldgate East                   1.0               NaN     3172  \n",
       "...                            ...               ...      ...  \n",
       "Woodford                       NaN               NaN     4868  \n",
       "Woodgrange Park                NaN               NaN      530  \n",
       "Woodside Park                  NaN               NaN     3093  \n",
       "Woolwich Arsenal               NaN               NaN     7892  \n",
       "All                          745.0            4428.0  1542283  \n",
       "\n",
       "[399 rows x 399 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "origin_b = file_network_b.pivot_table(values =\"flows\", index=\"station_origin\", columns = \"station_destination\",\n",
    "                            aggfunc=np.sum, margins=True)\n",
    "origin_b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "24cd7f36-b53e-4204-8083-9def176ca0b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>station_destination</th>\n",
       "      <th>Abbey Road</th>\n",
       "      <th>Acton Central</th>\n",
       "      <th>Acton Town</th>\n",
       "      <th>Aldgate</th>\n",
       "      <th>Aldgate East</th>\n",
       "      <th>All Saints</th>\n",
       "      <th>Alperton</th>\n",
       "      <th>Amersham</th>\n",
       "      <th>Anerley</th>\n",
       "      <th>Angel</th>\n",
       "      <th>...</th>\n",
       "      <th>Wimbledon</th>\n",
       "      <th>Wimbledon Park</th>\n",
       "      <th>Wood Green</th>\n",
       "      <th>Wood Lane</th>\n",
       "      <th>Wood Street</th>\n",
       "      <th>Woodford</th>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <th>Woodside Park</th>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_origin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Abbey Road</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.504655</td>\n",
       "      <td>7.413488e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Central</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.352939</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.392559e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Town</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.129995</td>\n",
       "      <td>19.568240</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.565120</td>\n",
       "      <td>1.649952</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.378488</td>\n",
       "      <td>...</td>\n",
       "      <td>32.102605</td>\n",
       "      <td>3.688087</td>\n",
       "      <td>6.757409</td>\n",
       "      <td>11.661474</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.448422</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.127509</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.440583e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.166447</td>\n",
       "      <td>NaN</td>\n",
       "      <td>77.958031</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.205340</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45.542063</td>\n",
       "      <td>...</td>\n",
       "      <td>23.345826</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.148595</td>\n",
       "      <td>6.270999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.127701</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.339327</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.156304e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate East</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.620240</td>\n",
       "      <td>85.274177</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.271812</td>\n",
       "      <td>1.288855</td>\n",
       "      <td>NaN</td>\n",
       "      <td>46.835066</td>\n",
       "      <td>...</td>\n",
       "      <td>24.849028</td>\n",
       "      <td>2.815222</td>\n",
       "      <td>8.637556</td>\n",
       "      <td>6.645865</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.565352</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.551298</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.565930e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodford</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.131783</td>\n",
       "      <td>25.590389</td>\n",
       "      <td>26.668422</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.902462</td>\n",
       "      <td>...</td>\n",
       "      <td>24.031179</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.385669</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.302044e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.333273</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.016125e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodside Park</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.733745</td>\n",
       "      <td>17.196442</td>\n",
       "      <td>16.718992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.589840</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19.682029</td>\n",
       "      <td>...</td>\n",
       "      <td>19.160491</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.100931</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.017304e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <td>9.223829</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.760631</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.731572e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>432.717816</td>\n",
       "      <td>940.690903</td>\n",
       "      <td>2761.868492</td>\n",
       "      <td>9760.608814</td>\n",
       "      <td>9948.746995</td>\n",
       "      <td>556.889015</td>\n",
       "      <td>929.402613</td>\n",
       "      <td>321.089162</td>\n",
       "      <td>216.986035</td>\n",
       "      <td>10163.224521</td>\n",
       "      <td>...</td>\n",
       "      <td>7895.532316</td>\n",
       "      <td>747.535705</td>\n",
       "      <td>2691.630238</td>\n",
       "      <td>1979.213661</td>\n",
       "      <td>506.718833</td>\n",
       "      <td>885.503704</td>\n",
       "      <td>303.529598</td>\n",
       "      <td>934.419631</td>\n",
       "      <td>5553.839094</td>\n",
       "      <td>1.934415e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>399 rows × 399 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "station_destination  Abbey Road  Acton Central   Acton Town      Aldgate  \\\n",
       "station_origin                                                             \n",
       "Abbey Road                  NaN            NaN          NaN          NaN   \n",
       "Acton Central               NaN            NaN          NaN          NaN   \n",
       "Acton Town                  NaN            NaN          NaN    20.129995   \n",
       "Aldgate                     NaN            NaN     7.166447          NaN   \n",
       "Aldgate East                NaN            NaN     7.620240    85.274177   \n",
       "...                         ...            ...          ...          ...   \n",
       "Woodford                    NaN            NaN     7.131783    25.590389   \n",
       "Woodgrange Park             NaN       2.333273          NaN          NaN   \n",
       "Woodside Park               NaN            NaN     5.733745    17.196442   \n",
       "Woolwich Arsenal       9.223829            NaN          NaN          NaN   \n",
       "All                  432.717816     940.690903  2761.868492  9760.608814   \n",
       "\n",
       "station_destination  Aldgate East  All Saints    Alperton    Amersham  \\\n",
       "station_origin                                                          \n",
       "Abbey Road                    NaN         NaN         NaN         NaN   \n",
       "Acton Central                 NaN         NaN         NaN         NaN   \n",
       "Acton Town              19.568240         NaN    9.565120    1.649952   \n",
       "Aldgate                 77.958031         NaN         NaN    1.205340   \n",
       "Aldgate East                  NaN         NaN    3.271812    1.288855   \n",
       "...                           ...         ...         ...         ...   \n",
       "Woodford                26.668422         NaN         NaN         NaN   \n",
       "Woodgrange Park               NaN         NaN         NaN         NaN   \n",
       "Woodside Park           16.718992         NaN    2.589840         NaN   \n",
       "Woolwich Arsenal              NaN   11.760631         NaN         NaN   \n",
       "All                   9948.746995  556.889015  929.402613  321.089162   \n",
       "\n",
       "station_destination     Anerley         Angel  ...    Wimbledon  \\\n",
       "station_origin                                 ...                \n",
       "Abbey Road                  NaN           NaN  ...          NaN   \n",
       "Acton Central               NaN           NaN  ...          NaN   \n",
       "Acton Town                  NaN     21.378488  ...    32.102605   \n",
       "Aldgate                     NaN     45.542063  ...    23.345826   \n",
       "Aldgate East                NaN     46.835066  ...    24.849028   \n",
       "...                         ...           ...  ...          ...   \n",
       "Woodford                    NaN     23.902462  ...    24.031179   \n",
       "Woodgrange Park             NaN           NaN  ...          NaN   \n",
       "Woodside Park               NaN     19.682029  ...    19.160491   \n",
       "Woolwich Arsenal            NaN           NaN  ...          NaN   \n",
       "All                  216.986035  10163.224521  ...  7895.532316   \n",
       "\n",
       "station_destination  Wimbledon Park   Wood Green    Wood Lane  Wood Street  \\\n",
       "station_origin                                                               \n",
       "Abbey Road                      NaN          NaN          NaN          NaN   \n",
       "Acton Central                   NaN          NaN          NaN          NaN   \n",
       "Acton Town                 3.688087     6.757409    11.661474          NaN   \n",
       "Aldgate                         NaN     8.148595     6.270999          NaN   \n",
       "Aldgate East               2.815222     8.637556     6.645865          NaN   \n",
       "...                             ...          ...          ...          ...   \n",
       "Woodford                        NaN     8.385669          NaN          NaN   \n",
       "Woodgrange Park                 NaN          NaN          NaN          NaN   \n",
       "Woodside Park                   NaN     6.100931          NaN          NaN   \n",
       "Woolwich Arsenal                NaN          NaN          NaN          NaN   \n",
       "All                      747.535705  2691.630238  1979.213661   506.718833   \n",
       "\n",
       "station_destination    Woodford  Woodgrange Park  Woodside Park  \\\n",
       "station_origin                                                    \n",
       "Abbey Road                  NaN              NaN            NaN   \n",
       "Acton Central               NaN         3.352939            NaN   \n",
       "Acton Town             2.448422              NaN       3.127509   \n",
       "Aldgate                3.127701              NaN       3.339327   \n",
       "Aldgate East           3.565352              NaN       3.551298   \n",
       "...                         ...              ...            ...   \n",
       "Woodford                    NaN              NaN            NaN   \n",
       "Woodgrange Park             NaN              NaN            NaN   \n",
       "Woodside Park               NaN              NaN            NaN   \n",
       "Woolwich Arsenal            NaN              NaN            NaN   \n",
       "All                  885.503704       303.529598     934.419631   \n",
       "\n",
       "station_destination  Woolwich Arsenal           All  \n",
       "station_origin                                       \n",
       "Abbey Road                  38.504655  7.413488e+02  \n",
       "Acton Central                     NaN  7.392559e+02  \n",
       "Acton Town                        NaN  4.440583e+03  \n",
       "Aldgate                           NaN  7.156304e+03  \n",
       "Aldgate East                      NaN  7.565930e+03  \n",
       "...                               ...           ...  \n",
       "Woodford                          NaN  4.302044e+03  \n",
       "Woodgrange Park                   NaN  2.016125e+02  \n",
       "Woodside Park                     NaN  3.017304e+03  \n",
       "Woolwich Arsenal                  NaN  2.731572e+03  \n",
       "All                       5553.839094  1.934415e+06  \n",
       "\n",
       "[399 rows x 399 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_beta1 = file_network_b.pivot_table(values =\"sim_pre_b1\", index=\"station_origin\", columns = \"station_destination\",\n",
    "                            aggfunc=np.sum, margins=True)\n",
    "file_beta1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "63ee7eab-9242-4691-a63e-533f1b6c5359",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>station_destination</th>\n",
       "      <th>Abbey Road</th>\n",
       "      <th>Acton Central</th>\n",
       "      <th>Acton Town</th>\n",
       "      <th>Aldgate</th>\n",
       "      <th>Aldgate East</th>\n",
       "      <th>All Saints</th>\n",
       "      <th>Alperton</th>\n",
       "      <th>Amersham</th>\n",
       "      <th>Anerley</th>\n",
       "      <th>Angel</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_origin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Abbey Road</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Central</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Town</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.129995</td>\n",
       "      <td>19.568240</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.565120</td>\n",
       "      <td>1.649952</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.378488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.166447</td>\n",
       "      <td>NaN</td>\n",
       "      <td>77.958031</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.205340</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45.542063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate East</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.620240</td>\n",
       "      <td>85.274177</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.271812</td>\n",
       "      <td>1.288855</td>\n",
       "      <td>NaN</td>\n",
       "      <td>46.835066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All Saints</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alperton</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.171555</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.934461</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.969144</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.637505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amersham</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.237752</td>\n",
       "      <td>4.591873</td>\n",
       "      <td>4.488775</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.236038</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.865785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Anerley</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angel</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.921081</td>\n",
       "      <td>59.365548</td>\n",
       "      <td>55.813113</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.205810</td>\n",
       "      <td>1.664924</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "station_destination  Abbey Road  Acton Central  Acton Town    Aldgate  \\\n",
       "station_origin                                                          \n",
       "Abbey Road                  NaN            NaN         NaN        NaN   \n",
       "Acton Central               NaN            NaN         NaN        NaN   \n",
       "Acton Town                  NaN            NaN         NaN  20.129995   \n",
       "Aldgate                     NaN            NaN    7.166447        NaN   \n",
       "Aldgate East                NaN            NaN    7.620240  85.274177   \n",
       "All Saints                  NaN            NaN         NaN        NaN   \n",
       "Alperton                    NaN            NaN   10.171555        NaN   \n",
       "Amersham                    NaN            NaN    2.237752   4.591873   \n",
       "Anerley                     NaN            NaN         NaN        NaN   \n",
       "Angel                       NaN            NaN    9.921081  59.365548   \n",
       "\n",
       "station_destination  Aldgate East  All Saints  Alperton  Amersham  Anerley  \\\n",
       "station_origin                                                               \n",
       "Abbey Road                    NaN         NaN       NaN       NaN      NaN   \n",
       "Acton Central                 NaN         NaN       NaN       NaN      NaN   \n",
       "Acton Town              19.568240         NaN  9.565120  1.649952      NaN   \n",
       "Aldgate                 77.958031         NaN       NaN  1.205340      NaN   \n",
       "Aldgate East                  NaN         NaN  3.271812  1.288855      NaN   \n",
       "All Saints                    NaN         NaN       NaN       NaN      NaN   \n",
       "Alperton                 8.934461         NaN       NaN  0.969144      NaN   \n",
       "Amersham                 4.488775         NaN  1.236038       NaN      NaN   \n",
       "Anerley                       NaN         NaN       NaN       NaN      NaN   \n",
       "Angel                   55.813113         NaN  4.205810  1.664924      NaN   \n",
       "\n",
       "station_destination      Angel  \n",
       "station_origin                  \n",
       "Abbey Road                 NaN  \n",
       "Acton Central              NaN  \n",
       "Acton Town           21.378488  \n",
       "Aldgate              45.542063  \n",
       "Aldgate East         46.835066  \n",
       "All Saints                 NaN  \n",
       "Alperton              9.637505  \n",
       "Amersham              4.865785  \n",
       "Anerley                    NaN  \n",
       "Angel                      NaN  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "file_beta1.iloc[:10, :10]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a0fe665b-dc2e-457b-a084-f3776988a7c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>station_destination</th>\n",
       "      <th>Abbey Road</th>\n",
       "      <th>Acton Central</th>\n",
       "      <th>Acton Town</th>\n",
       "      <th>Aldgate</th>\n",
       "      <th>Aldgate East</th>\n",
       "      <th>All Saints</th>\n",
       "      <th>Alperton</th>\n",
       "      <th>Amersham</th>\n",
       "      <th>Anerley</th>\n",
       "      <th>Angel</th>\n",
       "      <th>...</th>\n",
       "      <th>Wimbledon</th>\n",
       "      <th>Wimbledon Park</th>\n",
       "      <th>Wood Green</th>\n",
       "      <th>Wood Lane</th>\n",
       "      <th>Wood Street</th>\n",
       "      <th>Woodford</th>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <th>Woodside Park</th>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_origin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Abbey Road</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.823912</td>\n",
       "      <td>6.319747e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Central</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.858266</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.301905e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Town</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.160138</td>\n",
       "      <td>16.681261</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.153940</td>\n",
       "      <td>1.406528</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.224435</td>\n",
       "      <td>...</td>\n",
       "      <td>27.366381</td>\n",
       "      <td>3.143969</td>\n",
       "      <td>5.760462</td>\n",
       "      <td>9.941011</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.087197</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.666095</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.785446e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.109153</td>\n",
       "      <td>NaN</td>\n",
       "      <td>66.456576</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.027511</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.823063</td>\n",
       "      <td>...</td>\n",
       "      <td>19.901525</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.946401</td>\n",
       "      <td>5.345814</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.666259</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.846663</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.100506e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate East</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.495996</td>\n",
       "      <td>72.693342</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.789109</td>\n",
       "      <td>1.098705</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.925305</td>\n",
       "      <td>...</td>\n",
       "      <td>21.182953</td>\n",
       "      <td>2.399881</td>\n",
       "      <td>7.363223</td>\n",
       "      <td>5.665374</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.039341</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.027361</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.449698e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodford</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.079603</td>\n",
       "      <td>21.814939</td>\n",
       "      <td>22.733925</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.376037</td>\n",
       "      <td>...</td>\n",
       "      <td>20.485764</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.148499</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.667347e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.989036</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.718679e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodside Park</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.887823</td>\n",
       "      <td>14.659383</td>\n",
       "      <td>14.252373</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.207751</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.778262</td>\n",
       "      <td>...</td>\n",
       "      <td>16.333668</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.200837</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.572149e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <td>7.863001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.025539</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.328573e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>368.877255</td>\n",
       "      <td>801.907075</td>\n",
       "      <td>2354.399173</td>\n",
       "      <td>8320.587812</td>\n",
       "      <td>8480.969227</td>\n",
       "      <td>474.728988</td>\n",
       "      <td>792.284190</td>\n",
       "      <td>273.717615</td>\n",
       "      <td>184.973232</td>\n",
       "      <td>8663.804040</td>\n",
       "      <td>...</td>\n",
       "      <td>6730.673384</td>\n",
       "      <td>637.248822</td>\n",
       "      <td>2294.523444</td>\n",
       "      <td>1687.212486</td>\n",
       "      <td>431.960611</td>\n",
       "      <td>754.861860</td>\n",
       "      <td>258.748683</td>\n",
       "      <td>796.561028</td>\n",
       "      <td>4734.459372</td>\n",
       "      <td>1.649024e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>399 rows × 399 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "station_destination  Abbey Road  Acton Central   Acton Town      Aldgate  \\\n",
       "station_origin                                                             \n",
       "Abbey Road                  NaN            NaN          NaN          NaN   \n",
       "Acton Central               NaN            NaN          NaN          NaN   \n",
       "Acton Town                  NaN            NaN          NaN    17.160138   \n",
       "Aldgate                     NaN            NaN     6.109153          NaN   \n",
       "Aldgate East                NaN            NaN     6.495996    72.693342   \n",
       "...                         ...            ...          ...          ...   \n",
       "Woodford                    NaN            NaN     6.079603    21.814939   \n",
       "Woodgrange Park             NaN       1.989036          NaN          NaN   \n",
       "Woodside Park               NaN            NaN     4.887823    14.659383   \n",
       "Woolwich Arsenal       7.863001            NaN          NaN          NaN   \n",
       "All                  368.877255     801.907075  2354.399173  8320.587812   \n",
       "\n",
       "station_destination  Aldgate East  All Saints    Alperton    Amersham  \\\n",
       "station_origin                                                          \n",
       "Abbey Road                    NaN         NaN         NaN         NaN   \n",
       "Acton Central                 NaN         NaN         NaN         NaN   \n",
       "Acton Town              16.681261         NaN    8.153940    1.406528   \n",
       "Aldgate                 66.456576         NaN         NaN    1.027511   \n",
       "Aldgate East                  NaN         NaN    2.789109    1.098705   \n",
       "...                           ...         ...         ...         ...   \n",
       "Woodford                22.733925         NaN         NaN         NaN   \n",
       "Woodgrange Park               NaN         NaN         NaN         NaN   \n",
       "Woodside Park           14.252373         NaN    2.207751         NaN   \n",
       "Woolwich Arsenal              NaN   10.025539         NaN         NaN   \n",
       "All                   8480.969227  474.728988  792.284190  273.717615   \n",
       "\n",
       "station_destination     Anerley        Angel  ...    Wimbledon  \\\n",
       "station_origin                                ...                \n",
       "Abbey Road                  NaN          NaN  ...          NaN   \n",
       "Acton Central               NaN          NaN  ...          NaN   \n",
       "Acton Town                  NaN    18.224435  ...    27.366381   \n",
       "Aldgate                     NaN    38.823063  ...    19.901525   \n",
       "Aldgate East                NaN    39.925305  ...    21.182953   \n",
       "...                         ...          ...  ...          ...   \n",
       "Woodford                    NaN    20.376037  ...    20.485764   \n",
       "Woodgrange Park             NaN          NaN  ...          NaN   \n",
       "Woodside Park               NaN    16.778262  ...    16.333668   \n",
       "Woolwich Arsenal            NaN          NaN  ...          NaN   \n",
       "All                  184.973232  8663.804040  ...  6730.673384   \n",
       "\n",
       "station_destination  Wimbledon Park   Wood Green    Wood Lane  Wood Street  \\\n",
       "station_origin                                                               \n",
       "Abbey Road                      NaN          NaN          NaN          NaN   \n",
       "Acton Central                   NaN          NaN          NaN          NaN   \n",
       "Acton Town                 3.143969     5.760462     9.941011          NaN   \n",
       "Aldgate                         NaN     6.946401     5.345814          NaN   \n",
       "Aldgate East               2.399881     7.363223     5.665374          NaN   \n",
       "...                             ...          ...          ...          ...   \n",
       "Woodford                        NaN     7.148499          NaN          NaN   \n",
       "Woodgrange Park                 NaN          NaN          NaN          NaN   \n",
       "Woodside Park                   NaN     5.200837          NaN          NaN   \n",
       "Woolwich Arsenal                NaN          NaN          NaN          NaN   \n",
       "All                      637.248822  2294.523444  1687.212486   431.960611   \n",
       "\n",
       "station_destination    Woodford  Woodgrange Park  Woodside Park  \\\n",
       "station_origin                                                    \n",
       "Abbey Road                  NaN              NaN            NaN   \n",
       "Acton Central               NaN         2.858266            NaN   \n",
       "Acton Town             2.087197              NaN       2.666095   \n",
       "Aldgate                2.666259              NaN       2.846663   \n",
       "Aldgate East           3.039341              NaN       3.027361   \n",
       "...                         ...              ...            ...   \n",
       "Woodford                    NaN              NaN            NaN   \n",
       "Woodgrange Park             NaN              NaN            NaN   \n",
       "Woodside Park               NaN              NaN            NaN   \n",
       "Woolwich Arsenal            NaN              NaN            NaN   \n",
       "All                  754.861860       258.748683     796.561028   \n",
       "\n",
       "station_destination  Woolwich Arsenal           All  \n",
       "station_origin                                       \n",
       "Abbey Road                  32.823912  6.319747e+02  \n",
       "Acton Central                     NaN  6.301905e+02  \n",
       "Acton Town                        NaN  3.785446e+03  \n",
       "Aldgate                           NaN  6.100506e+03  \n",
       "Aldgate East                      NaN  6.449698e+03  \n",
       "...                               ...           ...  \n",
       "Woodford                          NaN  3.667347e+03  \n",
       "Woodgrange Park                   NaN  1.718679e+02  \n",
       "Woodside Park                     NaN  2.572149e+03  \n",
       "Woolwich Arsenal                  NaN  2.328573e+03  \n",
       "All                       4734.459372  1.649024e+06  \n",
       "\n",
       "[399 rows x 399 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_beta2 = file_network_b.pivot_table(values =\"sim_pre_b2\", index=\"station_origin\", columns = \"station_destination\",\n",
    "                            aggfunc=np.sum, margins=True)\n",
    "file_beta2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "a5dd569d-a161-4087-b175-b39e9c86d3ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>station_destination</th>\n",
       "      <th>Abbey Road</th>\n",
       "      <th>Acton Central</th>\n",
       "      <th>Acton Town</th>\n",
       "      <th>Aldgate</th>\n",
       "      <th>Aldgate East</th>\n",
       "      <th>All Saints</th>\n",
       "      <th>Alperton</th>\n",
       "      <th>Amersham</th>\n",
       "      <th>Anerley</th>\n",
       "      <th>Angel</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_origin</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Abbey Road</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Central</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Town</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.160138</td>\n",
       "      <td>16.681261</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.153940</td>\n",
       "      <td>1.406528</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.224435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.109153</td>\n",
       "      <td>NaN</td>\n",
       "      <td>66.456576</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.027511</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.823063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate East</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.495996</td>\n",
       "      <td>72.693342</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.789109</td>\n",
       "      <td>1.098705</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.925305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All Saints</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alperton</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.670906</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.616325</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.826162</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.215646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amersham</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.907608</td>\n",
       "      <td>3.914416</td>\n",
       "      <td>3.826529</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.053681</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.147917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Anerley</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angel</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.457385</td>\n",
       "      <td>50.607115</td>\n",
       "      <td>47.578785</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.585311</td>\n",
       "      <td>1.419291</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "station_destination  Abbey Road  Acton Central  Acton Town    Aldgate  \\\n",
       "station_origin                                                          \n",
       "Abbey Road                  NaN            NaN         NaN        NaN   \n",
       "Acton Central               NaN            NaN         NaN        NaN   \n",
       "Acton Town                  NaN            NaN         NaN  17.160138   \n",
       "Aldgate                     NaN            NaN    6.109153        NaN   \n",
       "Aldgate East                NaN            NaN    6.495996  72.693342   \n",
       "All Saints                  NaN            NaN         NaN        NaN   \n",
       "Alperton                    NaN            NaN    8.670906        NaN   \n",
       "Amersham                    NaN            NaN    1.907608   3.914416   \n",
       "Anerley                     NaN            NaN         NaN        NaN   \n",
       "Angel                       NaN            NaN    8.457385  50.607115   \n",
       "\n",
       "station_destination  Aldgate East  All Saints  Alperton  Amersham  Anerley  \\\n",
       "station_origin                                                               \n",
       "Abbey Road                    NaN         NaN       NaN       NaN      NaN   \n",
       "Acton Central                 NaN         NaN       NaN       NaN      NaN   \n",
       "Acton Town              16.681261         NaN  8.153940  1.406528      NaN   \n",
       "Aldgate                 66.456576         NaN       NaN  1.027511      NaN   \n",
       "Aldgate East                  NaN         NaN  2.789109  1.098705      NaN   \n",
       "All Saints                    NaN         NaN       NaN       NaN      NaN   \n",
       "Alperton                 7.616325         NaN       NaN  0.826162      NaN   \n",
       "Amersham                 3.826529         NaN  1.053681       NaN      NaN   \n",
       "Anerley                       NaN         NaN       NaN       NaN      NaN   \n",
       "Angel                   47.578785         NaN  3.585311  1.419291      NaN   \n",
       "\n",
       "station_destination      Angel  \n",
       "station_origin                  \n",
       "Abbey Road                 NaN  \n",
       "Acton Central              NaN  \n",
       "Acton Town           18.224435  \n",
       "Aldgate              38.823063  \n",
       "Aldgate East         39.925305  \n",
       "All Saints                 NaN  \n",
       "Alperton              8.215646  \n",
       "Amersham              4.147917  \n",
       "Anerley                    NaN  \n",
       "Angel                      NaN  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_beta2.iloc[:10, :10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "caf47398-06af-4c24-a37a-4036259172b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# 提取前十行和前十列的数据\n",
    "file_beta1_subset = file_beta1.iloc[:10, :10]\n",
    "file_beta2_subset = file_beta2.iloc[:10, :10]\n",
    "\n",
    "# 创建Excel Writer对象\n",
    "writer = pd.ExcelWriter('subset_data.xlsx')\n",
    "\n",
    "# 将数据写入Excel文件\n",
    "file_beta1_subset.to_excel(writer, sheet_name='file_beta1_subset')\n",
    "file_beta2_subset.to_excel(writer, sheet_name='file_beta2_subset')\n",
    "\n",
    "# 保存并关闭Excel文件\n",
    "writer.save()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "cebf1af5-28d9-46c2-8f85-3e7fd6af9647",
   "metadata": {},
   "outputs": [],
   "source": [
    "o=origin_b.iloc[:10, :10]\n",
    "writer = pd.ExcelWriter('subset_data_ori.xlsx')\n",
    "o.to_excel(writer, sheet_name='subset')\n",
    "writer.save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "7773d1e1-0ca6-436d-8c40-47e7112c4335",
   "metadata": {},
   "outputs": [],
   "source": [
    "b=file_network_a_out.iloc[:10, :10]\n",
    "writer = pd.ExcelWriter('subset_data_a.xlsx')\n",
    "b.to_excel(writer, sheet_name='subset_a')\n",
    "writer.save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae8c0870-d7b3-46a5-8ac0-bed20e24aed9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16cfdc22-f4f9-40c8-b629-b4998b2a3e5d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "02898aef-6fad-4d1b-b983-a9edc2cce1d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the differences\n",
    "diff_beta2 = file_beta2.loc[\"All\"] - origin_b.loc[\"All\"]\n",
    "diff_beta1 = file_beta1.loc[\"All\"] - origin_b.loc[\"All\"]\n",
    "diff_network_a_out = file_network_a_out.loc[\"All\"] - origin_b.loc[\"All\"]\n",
    "\n",
    "# Create the middle DataFrame\n",
    "middle = pd.DataFrame({\n",
    "    \"file_beta2\": diff_beta2,\n",
    "    \"file_beta1\": diff_beta1,\n",
    "    \"file_network_a_out\": diff_network_a_out\n",
    "})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cd236587-c3b6-4253-b84c-eb44d089db41",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "9d2fde83-44e2-4436-afc7-60653bebaab3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>file_beta2</th>\n",
       "      <th>file_beta1</th>\n",
       "      <th>file_network_a_out</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_destination</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Abbey Road</th>\n",
       "      <td>23.877255</td>\n",
       "      <td>87.717816</td>\n",
       "      <td>27706.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Central</th>\n",
       "      <td>51.907075</td>\n",
       "      <td>190.690903</td>\n",
       "      <td>12229.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acton Town</th>\n",
       "      <td>152.399173</td>\n",
       "      <td>559.868492</td>\n",
       "      <td>10243.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate</th>\n",
       "      <td>538.587812</td>\n",
       "      <td>1978.608814</td>\n",
       "      <td>8616.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aldgate East</th>\n",
       "      <td>548.969227</td>\n",
       "      <td>2016.746995</td>\n",
       "      <td>7868.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodford</th>\n",
       "      <td>48.861860</td>\n",
       "      <td>179.503704</td>\n",
       "      <td>14124.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodgrange Park</th>\n",
       "      <td>16.748683</td>\n",
       "      <td>61.529598</td>\n",
       "      <td>4704.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woodside Park</th>\n",
       "      <td>51.561028</td>\n",
       "      <td>189.419631</td>\n",
       "      <td>14007.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Woolwich Arsenal</th>\n",
       "      <td>306.459372</td>\n",
       "      <td>1125.839094</td>\n",
       "      <td>15118.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>106740.532757</td>\n",
       "      <td>392132.451475</td>\n",
       "      <td>4567145.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>399 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        file_beta2     file_beta1  file_network_a_out\n",
       "station_destination                                                  \n",
       "Abbey Road               23.877255      87.717816             27706.0\n",
       "Acton Central            51.907075     190.690903             12229.0\n",
       "Acton Town              152.399173     559.868492             10243.0\n",
       "Aldgate                 538.587812    1978.608814              8616.0\n",
       "Aldgate East            548.969227    2016.746995              7868.0\n",
       "...                            ...            ...                 ...\n",
       "Woodford                 48.861860     179.503704             14124.0\n",
       "Woodgrange Park          16.748683      61.529598              4704.0\n",
       "Woodside Park            51.561028     189.419631             14007.0\n",
       "Woolwich Arsenal        306.459372    1125.839094             15118.0\n",
       "All                  106740.532757  392132.451475           4567145.0\n",
       "\n",
       "[399 rows x 3 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "middle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4629dbf9-a63b-4c7f-95b7-e93d0f837d05",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "111722c7-3831-45b8-9618-851d9b1a0212",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Normalize the data in the middle DataFrame\n",
    "normalized_middle = (middle - middle.min()) / (middle.max() - middle.min())\n",
    "\n",
    "# Plotting the lines\n",
    "plt.figure(figsize=(15, 15))\n",
    "plt.plot(normalized_middle.index[:-1], normalized_middle['file_beta2'][:-1], label='ScenarioB_beta2')\n",
    "plt.plot(normalized_middle.index[:-1], normalized_middle['file_beta1'][:-1], label='ScenarioB_beta1')\n",
    "plt.plot(normalized_middle.index[:-1], normalized_middle['file_network_a_out'][:-1], label='ScenarioA')\n",
    "\n",
    "# Customize the plot\n",
    "plt.xlabel('Station Origin', fontsize='x-large')\n",
    "plt.ylabel('Normalized Difference', fontsize='x-large')\n",
    "plt.title('Normalized Difference of Flow from Station Origin to Station Destination', fontsize='xx-large')\n",
    "\n",
    "# Move the legend to the right and make it larger\n",
    "plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize='x-large')\n",
    "\n",
    "# Select a subset of x-axis labels to be displayed\n",
    "step = 15  # Adjust the step value as per your preference\n",
    "x_labels = normalized_middle.index[:-1:step]\n",
    "plt.xticks(x_labels, rotation=45)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c581541e-f53f-4687-8ee3-07824a7a1f17",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8b9b7b1-4f87-4ded-bcbc-a1e2832753f4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
